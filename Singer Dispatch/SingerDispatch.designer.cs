#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SingerDispatch
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SingerDispatch")]
	public partial class SingerDispatchDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertRate(Rate instance);
    partial void UpdateRate(Rate instance);
    partial void DeleteRate(Rate instance);
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertCommodity(Commodity instance);
    partial void UpdateCommodity(Commodity instance);
    partial void DeleteCommodity(Commodity instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyPriorityLevel(CompanyPriorityLevel instance);
    partial void UpdateCompanyPriorityLevel(CompanyPriorityLevel instance);
    partial void DeleteCompanyPriorityLevel(CompanyPriorityLevel instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertContactType(ContactType instance);
    partial void UpdateContactType(ContactType instance);
    partial void DeleteContactType(ContactType instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertProvincesAndState(ProvincesAndState instance);
    partial void UpdateProvincesAndState(ProvincesAndState instance);
    partial void DeleteProvincesAndState(ProvincesAndState instance);
    partial void InsertRateDiscount(RateDiscount instance);
    partial void UpdateRateDiscount(RateDiscount instance);
    partial void DeleteRateDiscount(RateDiscount instance);
    partial void InsertServiceType(ServiceType instance);
    partial void UpdateServiceType(ServiceType instance);
    partial void DeleteServiceType(ServiceType instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    #endregion
		
		public SingerDispatchDataContext() : 
				base(global::SingerDispatch.Properties.Settings.Default.SingerDispatchDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SingerDispatchDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SingerDispatchDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SingerDispatchDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SingerDispatchDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Rate> Rates
		{
			get
			{
				return this.GetTable<Rate>();
			}
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<Commodity> Commodities
		{
			get
			{
				return this.GetTable<Commodity>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyPriorityLevel> CompanyPriorityLevels
		{
			get
			{
				return this.GetTable<CompanyPriorityLevel>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<ContactType> ContactTypes
		{
			get
			{
				return this.GetTable<ContactType>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<ProvincesAndState> ProvincesAndStates
		{
			get
			{
				return this.GetTable<ProvincesAndState>();
			}
		}
		
		public System.Data.Linq.Table<RateDiscount> RateDiscounts
		{
			get
			{
				return this.GetTable<RateDiscount>();
			}
		}
		
		public System.Data.Linq.Table<ServiceType> ServiceTypes
		{
			get
			{
				return this.GetTable<ServiceType>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
	}
	
	[Table(Name="dbo.Addresses")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CompanyID;
		
		private System.Nullable<long> _AddressTypeID;
		
		private string _Line1;
		
		private string _Line2;
		
		private string _City;
		
		private long _ProvinceStateID;
		
		private string _PostalZip;
		
		private string _PrimaryPhone;
		
		private string _SecondaryPhone;
		
		private string _Fax;
		
		private string _Notes;
		
		private EntitySet<Contact> _Contacts;
		
		private EntityRef<AddressType> _AddressType;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ProvincesAndState> _ProvincesAndState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnAddressTypeIDChanging(System.Nullable<long> value);
    partial void OnAddressTypeIDChanged();
    partial void OnLine1Changing(string value);
    partial void OnLine1Changed();
    partial void OnLine2Changing(string value);
    partial void OnLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceStateIDChanging(long value);
    partial void OnProvinceStateIDChanged();
    partial void OnPostalZipChanging(string value);
    partial void OnPostalZipChanged();
    partial void OnPrimaryPhoneChanging(string value);
    partial void OnPrimaryPhoneChanged();
    partial void OnSecondaryPhoneChanging(string value);
    partial void OnSecondaryPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Address()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._AddressType = default(EntityRef<AddressType>);
			this._Company = default(EntityRef<Company>);
			this._ProvincesAndState = default(EntityRef<ProvincesAndState>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressTypeID", DbType="BigInt")]
		public System.Nullable<long> AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					if (this._AddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Line1", DbType="VarChar(255)")]
		public string Line1
		{
			get
			{
				return this._Line1;
			}
			set
			{
				if ((this._Line1 != value))
				{
					this.OnLine1Changing(value);
					this.SendPropertyChanging();
					this._Line1 = value;
					this.SendPropertyChanged("Line1");
					this.OnLine1Changed();
				}
			}
		}
		
		[Column(Storage="_Line2", DbType="VarChar(255)")]
		public string Line2
		{
			get
			{
				return this._Line2;
			}
			set
			{
				if ((this._Line2 != value))
				{
					this.OnLine2Changing(value);
					this.SendPropertyChanging();
					this._Line2 = value;
					this.SendPropertyChanged("Line2");
					this.OnLine2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_ProvinceStateID", DbType="BigInt NOT NULL")]
		public long ProvinceStateID
		{
			get
			{
				return this._ProvinceStateID;
			}
			set
			{
				if ((this._ProvinceStateID != value))
				{
					if (this._ProvincesAndState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceStateIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceStateID = value;
					this.SendPropertyChanged("ProvinceStateID");
					this.OnProvinceStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_PostalZip", DbType="VarChar(50)")]
		public string PostalZip
		{
			get
			{
				return this._PostalZip;
			}
			set
			{
				if ((this._PostalZip != value))
				{
					this.OnPostalZipChanging(value);
					this.SendPropertyChanging();
					this._PostalZip = value;
					this.SendPropertyChanged("PostalZip");
					this.OnPostalZipChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryPhone", DbType="VarChar(50)")]
		public string PrimaryPhone
		{
			get
			{
				return this._PrimaryPhone;
			}
			set
			{
				if ((this._PrimaryPhone != value))
				{
					this.OnPrimaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPhone = value;
					this.SendPropertyChanged("PrimaryPhone");
					this.OnPrimaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryPhone", DbType="VarChar(50)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this.OnSecondaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPhone = value;
					this.SendPropertyChanged("SecondaryPhone");
					this.OnSecondaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Address_Contact", Storage="_Contacts", OtherKey="AddressID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[Association(Name="AddressType_Address", Storage="_AddressType", ThisKey="AddressTypeID", IsForeignKey=true)]
		public AddressType AddressType
		{
			get
			{
				return this._AddressType.Entity;
			}
			set
			{
				AddressType previousValue = this._AddressType.Entity;
				if (((previousValue != value) 
							|| (this._AddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressType.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._AddressType.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._AddressTypeID = value.ID;
					}
					else
					{
						this._AddressTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("AddressType");
				}
			}
		}
		
		[Association(Name="Company_Address", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="ProvincesAndState_Address", Storage="_ProvincesAndState", ThisKey="ProvinceStateID", IsForeignKey=true)]
		public ProvincesAndState ProvincesAndState
		{
			get
			{
				return this._ProvincesAndState.Entity;
			}
			set
			{
				ProvincesAndState previousValue = this._ProvincesAndState.Entity;
				if (((previousValue != value) 
							|| (this._ProvincesAndState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProvincesAndState.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._ProvincesAndState.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._ProvinceStateID = value.ID;
					}
					else
					{
						this._ProvinceStateID = default(long);
					}
					this.SendPropertyChanged("ProvincesAndState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[Table(Name="dbo.Rates")]
	public partial class Rate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private System.Nullable<double> _Hourly;
		
		private System.Nullable<double> _Daily;
		
		private System.Nullable<double> _Weekly;
		
		private System.Nullable<double> _Monthly;
		
		private byte _IsSpecialized;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHourlyChanging(System.Nullable<double> value);
    partial void OnHourlyChanged();
    partial void OnDailyChanging(System.Nullable<double> value);
    partial void OnDailyChanged();
    partial void OnWeeklyChanging(System.Nullable<double> value);
    partial void OnWeeklyChanged();
    partial void OnMonthlyChanging(System.Nullable<double> value);
    partial void OnMonthlyChanged();
    partial void OnIsSpecializedChanging(byte value);
    partial void OnIsSpecializedChanged();
    #endregion
		
		public Rate()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Hourly", DbType="Float")]
		public System.Nullable<double> Hourly
		{
			get
			{
				return this._Hourly;
			}
			set
			{
				if ((this._Hourly != value))
				{
					this.OnHourlyChanging(value);
					this.SendPropertyChanging();
					this._Hourly = value;
					this.SendPropertyChanged("Hourly");
					this.OnHourlyChanged();
				}
			}
		}
		
		[Column(Storage="_Daily", DbType="Float")]
		public System.Nullable<double> Daily
		{
			get
			{
				return this._Daily;
			}
			set
			{
				if ((this._Daily != value))
				{
					this.OnDailyChanging(value);
					this.SendPropertyChanging();
					this._Daily = value;
					this.SendPropertyChanged("Daily");
					this.OnDailyChanged();
				}
			}
		}
		
		[Column(Storage="_Weekly", DbType="Float")]
		public System.Nullable<double> Weekly
		{
			get
			{
				return this._Weekly;
			}
			set
			{
				if ((this._Weekly != value))
				{
					this.OnWeeklyChanging(value);
					this.SendPropertyChanging();
					this._Weekly = value;
					this.SendPropertyChanged("Weekly");
					this.OnWeeklyChanged();
				}
			}
		}
		
		[Column(Storage="_Monthly", DbType="Float")]
		public System.Nullable<double> Monthly
		{
			get
			{
				return this._Monthly;
			}
			set
			{
				if ((this._Monthly != value))
				{
					this.OnMonthlyChanging(value);
					this.SendPropertyChanging();
					this._Monthly = value;
					this.SendPropertyChanged("Monthly");
					this.OnMonthlyChanged();
				}
			}
		}
		
		[Column(Storage="_IsSpecialized", DbType="TinyInt NOT NULL")]
		public byte IsSpecialized
		{
			get
			{
				return this._IsSpecialized;
			}
			set
			{
				if ((this._IsSpecialized != value))
				{
					this.OnIsSpecializedChanging(value);
					this.SendPropertyChanging();
					this._IsSpecialized = value;
					this.SendPropertyChanged("IsSpecialized");
					this.OnIsSpecializedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AddressTypes")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AddressType()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="AddressType_Address", Storage="_Addresses", OtherKey="AddressTypeID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = null;
		}
	}
	
	[Table(Name="dbo.Commodities")]
	public partial class Commodity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CompanyID;
		
		private string _Name;
		
		private System.Nullable<decimal> _Value;
		
		private string _Serial;
		
		private string _Unit;
		
		private string _Owner;
		
		private string _LastLocation;
		
		private string _LastAddress;
		
		private System.Nullable<double> _Length;
		
		private System.Nullable<double> _Width;
		
		private System.Nullable<double> _Height;
		
		private System.Nullable<double> _Weight;
		
		private System.Nullable<byte> _SizeEstimated;
		
		private System.Nullable<byte> _WeightEstimated;
		
		private string _Notes;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    partial void OnSerialChanging(string value);
    partial void OnSerialChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnLastLocationChanging(string value);
    partial void OnLastLocationChanged();
    partial void OnLastAddressChanging(string value);
    partial void OnLastAddressChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(System.Nullable<double> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnSizeEstimatedChanging(System.Nullable<byte> value);
    partial void OnSizeEstimatedChanged();
    partial void OnWeightEstimatedChanging(System.Nullable<byte> value);
    partial void OnWeightEstimatedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Commodity()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Serial", DbType="VarChar(255)")]
		public string Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="VarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="VarChar(255)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_LastLocation", DbType="VarChar(255)")]
		public string LastLocation
		{
			get
			{
				return this._LastLocation;
			}
			set
			{
				if ((this._LastLocation != value))
				{
					this.OnLastLocationChanging(value);
					this.SendPropertyChanging();
					this._LastLocation = value;
					this.SendPropertyChanged("LastLocation");
					this.OnLastLocationChanged();
				}
			}
		}
		
		[Column(Storage="_LastAddress", DbType="VarChar(255)")]
		public string LastAddress
		{
			get
			{
				return this._LastAddress;
			}
			set
			{
				if ((this._LastAddress != value))
				{
					this.OnLastAddressChanging(value);
					this.SendPropertyChanging();
					this._LastAddress = value;
					this.SendPropertyChanged("LastAddress");
					this.OnLastAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Float")]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Float")]
		public System.Nullable<double> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_SizeEstimated", DbType="TinyInt")]
		public System.Nullable<byte> SizeEstimated
		{
			get
			{
				return this._SizeEstimated;
			}
			set
			{
				if ((this._SizeEstimated != value))
				{
					this.OnSizeEstimatedChanging(value);
					this.SendPropertyChanging();
					this._SizeEstimated = value;
					this.SendPropertyChanged("SizeEstimated");
					this.OnSizeEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_WeightEstimated", DbType="TinyInt")]
		public System.Nullable<byte> WeightEstimated
		{
			get
			{
				return this._WeightEstimated;
			}
			set
			{
				if ((this._WeightEstimated != value))
				{
					this.OnWeightEstimatedChanging(value);
					this.SendPropertyChanging();
					this._WeightEstimated = value;
					this.SendPropertyChanged("WeightEstimated");
					this.OnWeightEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Company_Commodity", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Commodities.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Commodities.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _OperatingAs;
		
		private string _Type;
		
		private System.Nullable<int> _AvailableCredit;
		
		private string _AccPacVendorCode;
		
		private System.Nullable<byte> _EquifaxComplete;
		
		private System.Nullable<long> _PriorityLevelID;
		
		private string _Notes;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<Commodity> _Commodities;
		
		private EntitySet<RateDiscount> _RateDiscounts;
		
		private EntitySet<Service> _Services;
		
		private EntityRef<CompanyPriorityLevel> _CompanyPriorityLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOperatingAsChanging(string value);
    partial void OnOperatingAsChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAvailableCreditChanging(System.Nullable<int> value);
    partial void OnAvailableCreditChanged();
    partial void OnAccPacVendorCodeChanging(string value);
    partial void OnAccPacVendorCodeChanged();
    partial void OnEquifaxCompleteChanging(System.Nullable<byte> value);
    partial void OnEquifaxCompleteChanged();
    partial void OnPriorityLevelIDChanging(System.Nullable<long> value);
    partial void OnPriorityLevelIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Company()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Commodities = new EntitySet<Commodity>(new Action<Commodity>(this.attach_Commodities), new Action<Commodity>(this.detach_Commodities));
			this._RateDiscounts = new EntitySet<RateDiscount>(new Action<RateDiscount>(this.attach_RateDiscounts), new Action<RateDiscount>(this.detach_RateDiscounts));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._CompanyPriorityLevel = default(EntityRef<CompanyPriorityLevel>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_OperatingAs", DbType="VarChar(255)")]
		public string OperatingAs
		{
			get
			{
				return this._OperatingAs;
			}
			set
			{
				if ((this._OperatingAs != value))
				{
					this.OnOperatingAsChanging(value);
					this.SendPropertyChanging();
					this._OperatingAs = value;
					this.SendPropertyChanged("OperatingAs");
					this.OnOperatingAsChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="VarChar(100)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AvailableCredit", DbType="Int")]
		public System.Nullable<int> AvailableCredit
		{
			get
			{
				return this._AvailableCredit;
			}
			set
			{
				if ((this._AvailableCredit != value))
				{
					this.OnAvailableCreditChanging(value);
					this.SendPropertyChanging();
					this._AvailableCredit = value;
					this.SendPropertyChanged("AvailableCredit");
					this.OnAvailableCreditChanged();
				}
			}
		}
		
		[Column(Storage="_AccPacVendorCode", DbType="VarChar(50)")]
		public string AccPacVendorCode
		{
			get
			{
				return this._AccPacVendorCode;
			}
			set
			{
				if ((this._AccPacVendorCode != value))
				{
					this.OnAccPacVendorCodeChanging(value);
					this.SendPropertyChanging();
					this._AccPacVendorCode = value;
					this.SendPropertyChanged("AccPacVendorCode");
					this.OnAccPacVendorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_EquifaxComplete", DbType="TinyInt")]
		public System.Nullable<byte> EquifaxComplete
		{
			get
			{
				return this._EquifaxComplete;
			}
			set
			{
				if ((this._EquifaxComplete != value))
				{
					this.OnEquifaxCompleteChanging(value);
					this.SendPropertyChanging();
					this._EquifaxComplete = value;
					this.SendPropertyChanged("EquifaxComplete");
					this.OnEquifaxCompleteChanged();
				}
			}
		}
		
		[Column(Storage="_PriorityLevelID", DbType="BigInt")]
		public System.Nullable<long> PriorityLevelID
		{
			get
			{
				return this._PriorityLevelID;
			}
			set
			{
				if ((this._PriorityLevelID != value))
				{
					if (this._CompanyPriorityLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriorityLevelIDChanging(value);
					this.SendPropertyChanging();
					this._PriorityLevelID = value;
					this.SendPropertyChanged("PriorityLevelID");
					this.OnPriorityLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Company_Address", Storage="_Addresses", OtherKey="CompanyID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[Association(Name="Company_Commodity", Storage="_Commodities", OtherKey="CompanyID")]
		public EntitySet<Commodity> Commodities
		{
			get
			{
				return this._Commodities;
			}
			set
			{
				this._Commodities.Assign(value);
			}
		}
		
		[Association(Name="Company_RateDiscount", Storage="_RateDiscounts", OtherKey="CompanyID")]
		public EntitySet<RateDiscount> RateDiscounts
		{
			get
			{
				return this._RateDiscounts;
			}
			set
			{
				this._RateDiscounts.Assign(value);
			}
		}
		
		[Association(Name="Company_Service", Storage="_Services", OtherKey="CompanyID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[Association(Name="CompanyPriorityLevel_Company", Storage="_CompanyPriorityLevel", ThisKey="PriorityLevelID", IsForeignKey=true)]
		public CompanyPriorityLevel CompanyPriorityLevel
		{
			get
			{
				return this._CompanyPriorityLevel.Entity;
			}
			set
			{
				CompanyPriorityLevel previousValue = this._CompanyPriorityLevel.Entity;
				if (((previousValue != value) 
							|| (this._CompanyPriorityLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyPriorityLevel.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._CompanyPriorityLevel.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._PriorityLevelID = value.ID;
					}
					else
					{
						this._PriorityLevelID = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyPriorityLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Commodities(Commodity entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Commodities(Commodity entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_RateDiscounts(RateDiscount entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_RateDiscounts(RateDiscount entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[Table(Name="dbo.CompanyPriorityLevels")]
	public partial class CompanyPriorityLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Company> _Companies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CompanyPriorityLevel()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="CompanyPriorityLevel_Company", Storage="_Companies", OtherKey="PriorityLevelID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyPriorityLevel = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyPriorityLevel = null;
		}
	}
	
	[Table(Name="dbo.Contacts")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _PrimaryPhone;
		
		private string _SecondaryPhone;
		
		private string _PreferedContactMethod;
		
		private System.Nullable<long> _AddressID;
		
		private System.Nullable<long> _TypeID;
		
		private string _Notes;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<ContactType> _ContactType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPrimaryPhoneChanging(string value);
    partial void OnPrimaryPhoneChanged();
    partial void OnSecondaryPhoneChanging(string value);
    partial void OnSecondaryPhoneChanged();
    partial void OnPreferedContactMethodChanging(string value);
    partial void OnPreferedContactMethodChanged();
    partial void OnAddressIDChanging(System.Nullable<long> value);
    partial void OnAddressIDChanged();
    partial void OnTypeIDChanging(System.Nullable<long> value);
    partial void OnTypeIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Contact()
		{
			this._Address = default(EntityRef<Address>);
			this._ContactType = default(EntityRef<ContactType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(255)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryPhone", DbType="VarChar(50)")]
		public string PrimaryPhone
		{
			get
			{
				return this._PrimaryPhone;
			}
			set
			{
				if ((this._PrimaryPhone != value))
				{
					this.OnPrimaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPhone = value;
					this.SendPropertyChanged("PrimaryPhone");
					this.OnPrimaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryPhone", DbType="VarChar(50)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this.OnSecondaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPhone = value;
					this.SendPropertyChanged("SecondaryPhone");
					this.OnSecondaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_PreferedContactMethod", DbType="VarChar(50)")]
		public string PreferedContactMethod
		{
			get
			{
				return this._PreferedContactMethod;
			}
			set
			{
				if ((this._PreferedContactMethod != value))
				{
					this.OnPreferedContactMethodChanging(value);
					this.SendPropertyChanging();
					this._PreferedContactMethod = value;
					this.SendPropertyChanged("PreferedContactMethod");
					this.OnPreferedContactMethodChanged();
				}
			}
		}
		
		[Column(Storage="_AddressID", DbType="BigInt")]
		public System.Nullable<long> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="BigInt")]
		public System.Nullable<long> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._ContactType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Address_Contact", Storage="_Address", ThisKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._AddressID = value.ID;
					}
					else
					{
						this._AddressID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="ContactType_Contact", Storage="_ContactType", ThisKey="TypeID", IsForeignKey=true)]
		public ContactType ContactType
		{
			get
			{
				return this._ContactType.Entity;
			}
			set
			{
				ContactType previousValue = this._ContactType.Entity;
				if (((previousValue != value) 
							|| (this._ContactType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactType.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._ContactType.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("ContactType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ContactTypes")]
	public partial class ContactType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ContactType()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ContactType_Contact", Storage="_Contacts", OtherKey="TypeID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactType = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactType = null;
		}
	}
	
	[Table(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<ProvincesAndState> _ProvincesAndStates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._ProvincesAndStates = new EntitySet<ProvincesAndState>(new Action<ProvincesAndState>(this.attach_ProvincesAndStates), new Action<ProvincesAndState>(this.detach_ProvincesAndStates));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Country_ProvincesAndState", Storage="_ProvincesAndStates", OtherKey="CountryID")]
		public EntitySet<ProvincesAndState> ProvincesAndStates
		{
			get
			{
				return this._ProvincesAndStates;
			}
			set
			{
				this._ProvincesAndStates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProvincesAndStates(ProvincesAndState entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_ProvincesAndStates(ProvincesAndState entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.ProvincesAndStates")]
	public partial class ProvincesAndState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private long _CountryID;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIDChanging(long value);
    partial void OnCountryIDChanged();
    #endregion
		
		public ProvincesAndState()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="BigInt NOT NULL")]
		public long CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Association(Name="ProvincesAndState_Address", Storage="_Addresses", OtherKey="ProvinceStateID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[Association(Name="Country_ProvincesAndState", Storage="_Country", ThisKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.ProvincesAndStates.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.ProvincesAndStates.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(long);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.ProvincesAndState = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.ProvincesAndState = null;
		}
	}
	
	[Table(Name="dbo.RateDiscounts")]
	public partial class RateDiscount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CompanyID;
		
		private System.Nullable<double> _Hourly;
		
		private System.Nullable<double> _Daily;
		
		private System.Nullable<double> _Weekly;
		
		private System.Nullable<double> _Monthly;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnHourlyChanging(System.Nullable<double> value);
    partial void OnHourlyChanged();
    partial void OnDailyChanging(System.Nullable<double> value);
    partial void OnDailyChanged();
    partial void OnWeeklyChanging(System.Nullable<double> value);
    partial void OnWeeklyChanged();
    partial void OnMonthlyChanging(System.Nullable<double> value);
    partial void OnMonthlyChanged();
    #endregion
		
		public RateDiscount()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Hourly", DbType="Float")]
		public System.Nullable<double> Hourly
		{
			get
			{
				return this._Hourly;
			}
			set
			{
				if ((this._Hourly != value))
				{
					this.OnHourlyChanging(value);
					this.SendPropertyChanging();
					this._Hourly = value;
					this.SendPropertyChanged("Hourly");
					this.OnHourlyChanged();
				}
			}
		}
		
		[Column(Storage="_Daily", DbType="Float")]
		public System.Nullable<double> Daily
		{
			get
			{
				return this._Daily;
			}
			set
			{
				if ((this._Daily != value))
				{
					this.OnDailyChanging(value);
					this.SendPropertyChanging();
					this._Daily = value;
					this.SendPropertyChanged("Daily");
					this.OnDailyChanged();
				}
			}
		}
		
		[Column(Storage="_Weekly", DbType="Float")]
		public System.Nullable<double> Weekly
		{
			get
			{
				return this._Weekly;
			}
			set
			{
				if ((this._Weekly != value))
				{
					this.OnWeeklyChanging(value);
					this.SendPropertyChanging();
					this._Weekly = value;
					this.SendPropertyChanged("Weekly");
					this.OnWeeklyChanged();
				}
			}
		}
		
		[Column(Storage="_Monthly", DbType="Float")]
		public System.Nullable<double> Monthly
		{
			get
			{
				return this._Monthly;
			}
			set
			{
				if ((this._Monthly != value))
				{
					this.OnMonthlyChanging(value);
					this.SendPropertyChanging();
					this._Monthly = value;
					this.SendPropertyChanged("Monthly");
					this.OnMonthlyChanged();
				}
			}
		}
		
		[Association(Name="Company_RateDiscount", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.RateDiscounts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.RateDiscounts.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ServiceTypes")]
	public partial class ServiceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServiceType()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ServiceType_Service", Storage="_Services", OtherKey="ServiceTypeID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = null;
		}
	}
	
	[Table(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _CompanyID;
		
		private System.Nullable<long> _ServiceTypeID;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ServiceType> _ServiceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<long> value);
    partial void OnCompanyIDChanged();
    partial void OnServiceTypeIDChanging(System.Nullable<long> value);
    partial void OnServiceTypeIDChanged();
    #endregion
		
		public Service()
		{
			this._Company = default(EntityRef<Company>);
			this._ServiceType = default(EntityRef<ServiceType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt")]
		public System.Nullable<long> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceTypeID", DbType="BigInt")]
		public System.Nullable<long> ServiceTypeID
		{
			get
			{
				return this._ServiceTypeID;
			}
			set
			{
				if ((this._ServiceTypeID != value))
				{
					if (this._ServiceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeID = value;
					this.SendPropertyChanged("ServiceTypeID");
					this.OnServiceTypeIDChanged();
				}
			}
		}
		
		[Association(Name="Company_Service", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="ServiceType_Service", Storage="_ServiceType", ThisKey="ServiceTypeID", IsForeignKey=true)]
		public ServiceType ServiceType
		{
			get
			{
				return this._ServiceType.Entity;
			}
			set
			{
				ServiceType previousValue = this._ServiceType.Entity;
				if (((previousValue != value) 
							|| (this._ServiceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceType.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._ServiceType.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._ServiceTypeID = value.ID;
					}
					else
					{
						this._ServiceTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("ServiceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
