#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SingerDispatch
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SingerDispatch-Development")]
	public partial class SingerDispatchDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertRate(Rate instance);
    partial void UpdateRate(Rate instance);
    partial void DeleteRate(Rate instance);
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertCommodity(Commodity instance);
    partial void UpdateCommodity(Commodity instance);
    partial void DeleteCommodity(Commodity instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyPriorityLevel(CompanyPriorityLevel instance);
    partial void UpdateCompanyPriorityLevel(CompanyPriorityLevel instance);
    partial void DeleteCompanyPriorityLevel(CompanyPriorityLevel instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertContactType(ContactType instance);
    partial void UpdateContactType(ContactType instance);
    partial void DeleteContactType(ContactType instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertProvincesAndState(ProvincesAndState instance);
    partial void UpdateProvincesAndState(ProvincesAndState instance);
    partial void DeleteProvincesAndState(ProvincesAndState instance);
    partial void InsertRateDiscount(RateDiscount instance);
    partial void UpdateRateDiscount(RateDiscount instance);
    partial void DeleteRateDiscount(RateDiscount instance);
    partial void InsertServiceType(ServiceType instance);
    partial void UpdateServiceType(ServiceType instance);
    partial void DeleteServiceType(ServiceType instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertQuoteSupplement(QuoteSupplement instance);
    partial void UpdateQuoteSupplement(QuoteSupplement instance);
    partial void DeleteQuoteSupplement(QuoteSupplement instance);
    partial void InsertBillingType(BillingType instance);
    partial void UpdateBillingType(BillingType instance);
    partial void DeleteBillingType(BillingType instance);
    partial void InsertQuoteCommodity(QuoteCommodity instance);
    partial void UpdateQuoteCommodity(QuoteCommodity instance);
    partial void DeleteQuoteCommodity(QuoteCommodity instance);
    partial void InsertDispatch(Dispatch instance);
    partial void UpdateDispatch(Dispatch instance);
    partial void DeleteDispatch(Dispatch instance);
    partial void InsertQuote(Quote instance);
    partial void UpdateQuote(Quote instance);
    partial void DeleteQuote(Quote instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertWheelType(WheelType instance);
    partial void UpdateWheelType(WheelType instance);
    partial void DeleteWheelType(WheelType instance);
    partial void InsertTrailerCombination(TrailerCombination instance);
    partial void UpdateTrailerCombination(TrailerCombination instance);
    partial void DeleteTrailerCombination(TrailerCombination instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    partial void InsertSeason(Season instance);
    partial void UpdateSeason(Season instance);
    partial void DeleteSeason(Season instance);
    partial void InsertJobCommodity(JobCommodity instance);
    partial void UpdateJobCommodity(JobCommodity instance);
    partial void DeleteJobCommodity(JobCommodity instance);
    partial void InsertLoad(Load instance);
    partial void UpdateLoad(Load instance);
    partial void DeleteLoad(Load instance);
    #endregion
		
		public SingerDispatchDataContext() : 
				base(global::SingerDispatch.Properties.Settings.Default.SingerDispatchDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SingerDispatchDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SingerDispatchDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SingerDispatchDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SingerDispatchDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Rate> Rates
		{
			get
			{
				return this.GetTable<Rate>();
			}
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<Commodity> Commodities
		{
			get
			{
				return this.GetTable<Commodity>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyPriorityLevel> CompanyPriorityLevels
		{
			get
			{
				return this.GetTable<CompanyPriorityLevel>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<ContactType> ContactTypes
		{
			get
			{
				return this.GetTable<ContactType>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<ProvincesAndState> ProvincesAndStates
		{
			get
			{
				return this.GetTable<ProvincesAndState>();
			}
		}
		
		public System.Data.Linq.Table<RateDiscount> RateDiscounts
		{
			get
			{
				return this.GetTable<RateDiscount>();
			}
		}
		
		public System.Data.Linq.Table<ServiceType> ServiceTypes
		{
			get
			{
				return this.GetTable<ServiceType>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<QuoteSupplement> QuoteSupplements
		{
			get
			{
				return this.GetTable<QuoteSupplement>();
			}
		}
		
		public System.Data.Linq.Table<BillingType> BillingTypes
		{
			get
			{
				return this.GetTable<BillingType>();
			}
		}
		
		public System.Data.Linq.Table<QuoteCommodity> QuoteCommodities
		{
			get
			{
				return this.GetTable<QuoteCommodity>();
			}
		}
		
		public System.Data.Linq.Table<Dispatch> Dispatches
		{
			get
			{
				return this.GetTable<Dispatch>();
			}
		}
		
		public System.Data.Linq.Table<Quote> Quotes
		{
			get
			{
				return this.GetTable<Quote>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<WheelType> WheelTypes
		{
			get
			{
				return this.GetTable<WheelType>();
			}
		}
		
		public System.Data.Linq.Table<TrailerCombination> TrailerCombinations
		{
			get
			{
				return this.GetTable<TrailerCombination>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		public System.Data.Linq.Table<Season> Seasons
		{
			get
			{
				return this.GetTable<Season>();
			}
		}
		
		public System.Data.Linq.Table<JobCommodity> JobCommodities
		{
			get
			{
				return this.GetTable<JobCommodity>();
			}
		}
		
		public System.Data.Linq.Table<Load> Loads
		{
			get
			{
				return this.GetTable<Load>();
			}
		}
	}
	
	[Table(Name="dbo.Addresses")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CompanyID;
		
		private System.Nullable<long> _AddressTypeID;
		
		private string _Line1;
		
		private string _Line2;
		
		private string _City;
		
		private long _ProvinceStateID;
		
		private string _PostalZip;
		
		private string _PrimaryPhone;
		
		private string _SecondaryPhone;
		
		private string _Fax;
		
		private string _Notes;
		
		private EntitySet<Contact> _Contacts;
		
		private EntityRef<AddressType> _AddressType;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ProvincesAndState> _ProvincesAndState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnAddressTypeIDChanging(System.Nullable<long> value);
    partial void OnAddressTypeIDChanged();
    partial void OnLine1Changing(string value);
    partial void OnLine1Changed();
    partial void OnLine2Changing(string value);
    partial void OnLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceStateIDChanging(long value);
    partial void OnProvinceStateIDChanged();
    partial void OnPostalZipChanging(string value);
    partial void OnPostalZipChanged();
    partial void OnPrimaryPhoneChanging(string value);
    partial void OnPrimaryPhoneChanged();
    partial void OnSecondaryPhoneChanging(string value);
    partial void OnSecondaryPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Address()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._AddressType = default(EntityRef<AddressType>);
			this._Company = default(EntityRef<Company>);
			this._ProvincesAndState = default(EntityRef<ProvincesAndState>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_AddressTypeID", DbType="BigInt")]
		public System.Nullable<long> AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					if (this._AddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Line1", DbType="VarChar(255)")]
		public string Line1
		{
			get
			{
				return this._Line1;
			}
			set
			{
				if ((this._Line1 != value))
				{
					this.OnLine1Changing(value);
					this.SendPropertyChanging();
					this._Line1 = value;
					this.SendPropertyChanged("Line1");
					this.OnLine1Changed();
				}
			}
		}
		
		[Column(Storage="_Line2", DbType="VarChar(255)")]
		public string Line2
		{
			get
			{
				return this._Line2;
			}
			set
			{
				if ((this._Line2 != value))
				{
					this.OnLine2Changing(value);
					this.SendPropertyChanging();
					this._Line2 = value;
					this.SendPropertyChanged("Line2");
					this.OnLine2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_ProvinceStateID", DbType="BigInt NOT NULL")]
		public long ProvinceStateID
		{
			get
			{
				return this._ProvinceStateID;
			}
			set
			{
				if ((this._ProvinceStateID != value))
				{
					if (this._ProvincesAndState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceStateIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceStateID = value;
					this.SendPropertyChanged("ProvinceStateID");
					this.OnProvinceStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_PostalZip", DbType="VarChar(50)")]
		public string PostalZip
		{
			get
			{
				return this._PostalZip;
			}
			set
			{
				if ((this._PostalZip != value))
				{
					this.OnPostalZipChanging(value);
					this.SendPropertyChanging();
					this._PostalZip = value;
					this.SendPropertyChanged("PostalZip");
					this.OnPostalZipChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryPhone", DbType="VarChar(50)")]
		public string PrimaryPhone
		{
			get
			{
				return this._PrimaryPhone;
			}
			set
			{
				if ((this._PrimaryPhone != value))
				{
					this.OnPrimaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPhone = value;
					this.SendPropertyChanged("PrimaryPhone");
					this.OnPrimaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryPhone", DbType="VarChar(50)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this.OnSecondaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPhone = value;
					this.SendPropertyChanged("SecondaryPhone");
					this.OnSecondaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Address_Contact", Storage="_Contacts", OtherKey="AddressID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[Association(Name="AddressType_Address", Storage="_AddressType", ThisKey="AddressTypeID", IsForeignKey=true)]
		public AddressType AddressType
		{
			get
			{
				return this._AddressType.Entity;
			}
			set
			{
				AddressType previousValue = this._AddressType.Entity;
				if (((previousValue != value) 
							|| (this._AddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressType.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._AddressType.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._AddressTypeID = value.ID;
					}
					else
					{
						this._AddressTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("AddressType");
				}
			}
		}
		
		[Association(Name="Company_Address", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="ProvincesAndState_Address", Storage="_ProvincesAndState", ThisKey="ProvinceStateID", IsForeignKey=true)]
		public ProvincesAndState ProvincesAndState
		{
			get
			{
				return this._ProvincesAndState.Entity;
			}
			set
			{
				ProvincesAndState previousValue = this._ProvincesAndState.Entity;
				if (((previousValue != value) 
							|| (this._ProvincesAndState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProvincesAndState.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._ProvincesAndState.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._ProvinceStateID = value.ID;
					}
					else
					{
						this._ProvinceStateID = default(long);
					}
					this.SendPropertyChanged("ProvincesAndState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[Table(Name="dbo.Rates")]
	public partial class Rate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private System.Nullable<double> _Hourly;
		
		private System.Nullable<double> _Daily;
		
		private System.Nullable<double> _Weekly;
		
		private System.Nullable<double> _Monthly;
		
		private byte _IsSpecialized;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHourlyChanging(System.Nullable<double> value);
    partial void OnHourlyChanged();
    partial void OnDailyChanging(System.Nullable<double> value);
    partial void OnDailyChanged();
    partial void OnWeeklyChanging(System.Nullable<double> value);
    partial void OnWeeklyChanged();
    partial void OnMonthlyChanging(System.Nullable<double> value);
    partial void OnMonthlyChanged();
    partial void OnIsSpecializedChanging(byte value);
    partial void OnIsSpecializedChanged();
    #endregion
		
		public Rate()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Hourly", DbType="Float")]
		public System.Nullable<double> Hourly
		{
			get
			{
				return this._Hourly;
			}
			set
			{
				if ((this._Hourly != value))
				{
					this.OnHourlyChanging(value);
					this.SendPropertyChanging();
					this._Hourly = value;
					this.SendPropertyChanged("Hourly");
					this.OnHourlyChanged();
				}
			}
		}
		
		[Column(Storage="_Daily", DbType="Float")]
		public System.Nullable<double> Daily
		{
			get
			{
				return this._Daily;
			}
			set
			{
				if ((this._Daily != value))
				{
					this.OnDailyChanging(value);
					this.SendPropertyChanging();
					this._Daily = value;
					this.SendPropertyChanged("Daily");
					this.OnDailyChanged();
				}
			}
		}
		
		[Column(Storage="_Weekly", DbType="Float")]
		public System.Nullable<double> Weekly
		{
			get
			{
				return this._Weekly;
			}
			set
			{
				if ((this._Weekly != value))
				{
					this.OnWeeklyChanging(value);
					this.SendPropertyChanging();
					this._Weekly = value;
					this.SendPropertyChanged("Weekly");
					this.OnWeeklyChanged();
				}
			}
		}
		
		[Column(Storage="_Monthly", DbType="Float")]
		public System.Nullable<double> Monthly
		{
			get
			{
				return this._Monthly;
			}
			set
			{
				if ((this._Monthly != value))
				{
					this.OnMonthlyChanging(value);
					this.SendPropertyChanging();
					this._Monthly = value;
					this.SendPropertyChanged("Monthly");
					this.OnMonthlyChanged();
				}
			}
		}
		
		[Column(Storage="_IsSpecialized", DbType="TinyInt NOT NULL")]
		public byte IsSpecialized
		{
			get
			{
				return this._IsSpecialized;
			}
			set
			{
				if ((this._IsSpecialized != value))
				{
					this.OnIsSpecializedChanging(value);
					this.SendPropertyChanging();
					this._IsSpecialized = value;
					this.SendPropertyChanged("IsSpecialized");
					this.OnIsSpecializedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AddressTypes")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AddressType()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="AddressType_Address", Storage="_Addresses", OtherKey="AddressTypeID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = null;
		}
	}
	
	[Table(Name="dbo.Commodities")]
	public partial class Commodity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CompanyID;
		
		private string _Name;
		
		private System.Nullable<decimal> _Value;
		
		private string _Serial;
		
		private string _Unit;
		
		private string _Owner;
		
		private string _LastLocation;
		
		private string _LastAddress;
		
		private System.Nullable<double> _Length;
		
		private System.Nullable<double> _Width;
		
		private System.Nullable<double> _Height;
		
		private System.Nullable<double> _Weight;
		
		private System.Nullable<byte> _SizeEstimated;
		
		private System.Nullable<byte> _WeightEstimated;
		
		private string _Notes;
		
		private EntitySet<JobCommodity> _JobCommodities;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    partial void OnSerialChanging(string value);
    partial void OnSerialChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnLastLocationChanging(string value);
    partial void OnLastLocationChanged();
    partial void OnLastAddressChanging(string value);
    partial void OnLastAddressChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(System.Nullable<double> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnSizeEstimatedChanging(System.Nullable<byte> value);
    partial void OnSizeEstimatedChanged();
    partial void OnWeightEstimatedChanging(System.Nullable<byte> value);
    partial void OnWeightEstimatedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Commodity()
		{
			this._JobCommodities = new EntitySet<JobCommodity>(new Action<JobCommodity>(this.attach_JobCommodities), new Action<JobCommodity>(this.detach_JobCommodities));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Serial", DbType="VarChar(255)")]
		public string Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="VarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="VarChar(255)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_LastLocation", DbType="VarChar(255)")]
		public string LastLocation
		{
			get
			{
				return this._LastLocation;
			}
			set
			{
				if ((this._LastLocation != value))
				{
					this.OnLastLocationChanging(value);
					this.SendPropertyChanging();
					this._LastLocation = value;
					this.SendPropertyChanged("LastLocation");
					this.OnLastLocationChanged();
				}
			}
		}
		
		[Column(Storage="_LastAddress", DbType="VarChar(255)")]
		public string LastAddress
		{
			get
			{
				return this._LastAddress;
			}
			set
			{
				if ((this._LastAddress != value))
				{
					this.OnLastAddressChanging(value);
					this.SendPropertyChanging();
					this._LastAddress = value;
					this.SendPropertyChanged("LastAddress");
					this.OnLastAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Float")]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Float")]
		public System.Nullable<double> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_SizeEstimated", DbType="TinyInt")]
		public System.Nullable<byte> SizeEstimated
		{
			get
			{
				return this._SizeEstimated;
			}
			set
			{
				if ((this._SizeEstimated != value))
				{
					this.OnSizeEstimatedChanging(value);
					this.SendPropertyChanging();
					this._SizeEstimated = value;
					this.SendPropertyChanged("SizeEstimated");
					this.OnSizeEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_WeightEstimated", DbType="TinyInt")]
		public System.Nullable<byte> WeightEstimated
		{
			get
			{
				return this._WeightEstimated;
			}
			set
			{
				if ((this._WeightEstimated != value))
				{
					this.OnWeightEstimatedChanging(value);
					this.SendPropertyChanging();
					this._WeightEstimated = value;
					this.SendPropertyChanged("WeightEstimated");
					this.OnWeightEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Commodity_JobCommodity", Storage="_JobCommodities", OtherKey="OriginalCommodityID")]
		public EntitySet<JobCommodity> JobCommodities
		{
			get
			{
				return this._JobCommodities;
			}
			set
			{
				this._JobCommodities.Assign(value);
			}
		}
		
		[Association(Name="Company_Commodity", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Commodities.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Commodities.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobCommodities(JobCommodity entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = this;
		}
		
		private void detach_JobCommodities(JobCommodity entity)
		{
			this.SendPropertyChanging();
			entity.Commodity = null;
		}
	}
	
	[Table(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private string _OperatingAs;
		
		private string _Type;
		
		private System.Nullable<int> _AvailableCredit;
		
		private string _AccPacVendorCode;
		
		private System.Nullable<byte> _EquifaxComplete;
		
		private System.Nullable<long> _PriorityLevelID;
		
		private string _Notes;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<Commodity> _Commodities;
		
		private EntitySet<RateDiscount> _RateDiscounts;
		
		private EntitySet<Service> _Services;
		
		private EntitySet<Quote> _Quotes;
		
		private EntitySet<Quote> _Quotes1;
		
		private EntitySet<Job> _Jobs;
		
		private EntitySet<Job> _Jobs1;
		
		private EntityRef<CompanyPriorityLevel> _CompanyPriorityLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOperatingAsChanging(string value);
    partial void OnOperatingAsChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAvailableCreditChanging(System.Nullable<int> value);
    partial void OnAvailableCreditChanged();
    partial void OnAccPacVendorCodeChanging(string value);
    partial void OnAccPacVendorCodeChanged();
    partial void OnEquifaxCompleteChanging(System.Nullable<byte> value);
    partial void OnEquifaxCompleteChanged();
    partial void OnPriorityLevelIDChanging(System.Nullable<long> value);
    partial void OnPriorityLevelIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Company()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Commodities = new EntitySet<Commodity>(new Action<Commodity>(this.attach_Commodities), new Action<Commodity>(this.detach_Commodities));
			this._RateDiscounts = new EntitySet<RateDiscount>(new Action<RateDiscount>(this.attach_RateDiscounts), new Action<RateDiscount>(this.detach_RateDiscounts));
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Quotes = new EntitySet<Quote>(new Action<Quote>(this.attach_Quotes), new Action<Quote>(this.detach_Quotes));
			this._Quotes1 = new EntitySet<Quote>(new Action<Quote>(this.attach_Quotes1), new Action<Quote>(this.detach_Quotes1));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._Jobs1 = new EntitySet<Job>(new Action<Job>(this.attach_Jobs1), new Action<Job>(this.detach_Jobs1));
			this._CompanyPriorityLevel = default(EntityRef<CompanyPriorityLevel>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_OperatingAs", DbType="VarChar(255)")]
		public string OperatingAs
		{
			get
			{
				return this._OperatingAs;
			}
			set
			{
				if ((this._OperatingAs != value))
				{
					this.OnOperatingAsChanging(value);
					this.SendPropertyChanging();
					this._OperatingAs = value;
					this.SendPropertyChanged("OperatingAs");
					this.OnOperatingAsChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="VarChar(100)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AvailableCredit", DbType="Int")]
		public System.Nullable<int> AvailableCredit
		{
			get
			{
				return this._AvailableCredit;
			}
			set
			{
				if ((this._AvailableCredit != value))
				{
					this.OnAvailableCreditChanging(value);
					this.SendPropertyChanging();
					this._AvailableCredit = value;
					this.SendPropertyChanged("AvailableCredit");
					this.OnAvailableCreditChanged();
				}
			}
		}
		
		[Column(Storage="_AccPacVendorCode", DbType="VarChar(50)")]
		public string AccPacVendorCode
		{
			get
			{
				return this._AccPacVendorCode;
			}
			set
			{
				if ((this._AccPacVendorCode != value))
				{
					this.OnAccPacVendorCodeChanging(value);
					this.SendPropertyChanging();
					this._AccPacVendorCode = value;
					this.SendPropertyChanged("AccPacVendorCode");
					this.OnAccPacVendorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_EquifaxComplete", DbType="TinyInt")]
		public System.Nullable<byte> EquifaxComplete
		{
			get
			{
				return this._EquifaxComplete;
			}
			set
			{
				if ((this._EquifaxComplete != value))
				{
					this.OnEquifaxCompleteChanging(value);
					this.SendPropertyChanging();
					this._EquifaxComplete = value;
					this.SendPropertyChanged("EquifaxComplete");
					this.OnEquifaxCompleteChanged();
				}
			}
		}
		
		[Column(Storage="_PriorityLevelID", DbType="BigInt")]
		public System.Nullable<long> PriorityLevelID
		{
			get
			{
				return this._PriorityLevelID;
			}
			set
			{
				if ((this._PriorityLevelID != value))
				{
					if (this._CompanyPriorityLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriorityLevelIDChanging(value);
					this.SendPropertyChanging();
					this._PriorityLevelID = value;
					this.SendPropertyChanged("PriorityLevelID");
					this.OnPriorityLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Company_Address", Storage="_Addresses", OtherKey="CompanyID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[Association(Name="Company_Commodity", Storage="_Commodities", OtherKey="CompanyID")]
		public EntitySet<Commodity> Commodities
		{
			get
			{
				return this._Commodities;
			}
			set
			{
				this._Commodities.Assign(value);
			}
		}
		
		[Association(Name="Company_RateDiscount", Storage="_RateDiscounts", OtherKey="CompanyID")]
		public EntitySet<RateDiscount> RateDiscounts
		{
			get
			{
				return this._RateDiscounts;
			}
			set
			{
				this._RateDiscounts.Assign(value);
			}
		}
		
		[Association(Name="Company_Service", Storage="_Services", OtherKey="CompanyID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[Association(Name="Company_Quote", Storage="_Quotes", OtherKey="CompanyID")]
		public EntitySet<Quote> Quotes
		{
			get
			{
				return this._Quotes;
			}
			set
			{
				this._Quotes.Assign(value);
			}
		}
		
		[Association(Name="Company_Quote1", Storage="_Quotes1", OtherKey="CareOfCompanyID")]
		public EntitySet<Quote> Quotes1
		{
			get
			{
				return this._Quotes1;
			}
			set
			{
				this._Quotes1.Assign(value);
			}
		}
		
		[Association(Name="Company_Job", Storage="_Jobs", OtherKey="CompanyID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[Association(Name="Company_Job1", Storage="_Jobs1", OtherKey="CareOfCompanyID")]
		public EntitySet<Job> Jobs1
		{
			get
			{
				return this._Jobs1;
			}
			set
			{
				this._Jobs1.Assign(value);
			}
		}
		
		[Association(Name="CompanyPriorityLevel_Company", Storage="_CompanyPriorityLevel", ThisKey="PriorityLevelID", IsForeignKey=true)]
		public CompanyPriorityLevel CompanyPriorityLevel
		{
			get
			{
				return this._CompanyPriorityLevel.Entity;
			}
			set
			{
				CompanyPriorityLevel previousValue = this._CompanyPriorityLevel.Entity;
				if (((previousValue != value) 
							|| (this._CompanyPriorityLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyPriorityLevel.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._CompanyPriorityLevel.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._PriorityLevelID = value.ID;
					}
					else
					{
						this._PriorityLevelID = default(Nullable<long>);
					}
					this.SendPropertyChanged("CompanyPriorityLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Commodities(Commodity entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Commodities(Commodity entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_RateDiscounts(RateDiscount entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_RateDiscounts(RateDiscount entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Quotes1(Quote entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = this;
		}
		
		private void detach_Quotes1(Quote entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Jobs1(Job entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = this;
		}
		
		private void detach_Jobs1(Job entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = null;
		}
	}
	
	[Table(Name="dbo.CompanyPriorityLevels")]
	public partial class CompanyPriorityLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Company> _Companies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CompanyPriorityLevel()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="CompanyPriorityLevel_Company", Storage="_Companies", OtherKey="PriorityLevelID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyPriorityLevel = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.CompanyPriorityLevel = null;
		}
	}
	
	[Table(Name="dbo.Contacts")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _PrimaryPhone;
		
		private string _SecondaryPhone;
		
		private string _PreferedContactMethod;
		
		private System.Nullable<long> _AddressID;
		
		private System.Nullable<long> _TypeID;
		
		private string _Notes;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<ContactType> _ContactType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPrimaryPhoneChanging(string value);
    partial void OnPrimaryPhoneChanged();
    partial void OnSecondaryPhoneChanging(string value);
    partial void OnSecondaryPhoneChanged();
    partial void OnPreferedContactMethodChanging(string value);
    partial void OnPreferedContactMethodChanged();
    partial void OnAddressIDChanging(System.Nullable<long> value);
    partial void OnAddressIDChanged();
    partial void OnTypeIDChanging(System.Nullable<long> value);
    partial void OnTypeIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Contact()
		{
			this._Address = default(EntityRef<Address>);
			this._ContactType = default(EntityRef<ContactType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(255)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryPhone", DbType="VarChar(50)")]
		public string PrimaryPhone
		{
			get
			{
				return this._PrimaryPhone;
			}
			set
			{
				if ((this._PrimaryPhone != value))
				{
					this.OnPrimaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPhone = value;
					this.SendPropertyChanged("PrimaryPhone");
					this.OnPrimaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryPhone", DbType="VarChar(50)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this.OnSecondaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPhone = value;
					this.SendPropertyChanged("SecondaryPhone");
					this.OnSecondaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_PreferedContactMethod", DbType="VarChar(50)")]
		public string PreferedContactMethod
		{
			get
			{
				return this._PreferedContactMethod;
			}
			set
			{
				if ((this._PreferedContactMethod != value))
				{
					this.OnPreferedContactMethodChanging(value);
					this.SendPropertyChanging();
					this._PreferedContactMethod = value;
					this.SendPropertyChanged("PreferedContactMethod");
					this.OnPreferedContactMethodChanged();
				}
			}
		}
		
		[Column(Storage="_AddressID", DbType="BigInt")]
		public System.Nullable<long> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="BigInt")]
		public System.Nullable<long> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._ContactType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Address_Contact", Storage="_Address", ThisKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._AddressID = value.ID;
					}
					else
					{
						this._AddressID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="ContactType_Contact", Storage="_ContactType", ThisKey="TypeID", IsForeignKey=true)]
		public ContactType ContactType
		{
			get
			{
				return this._ContactType.Entity;
			}
			set
			{
				ContactType previousValue = this._ContactType.Entity;
				if (((previousValue != value) 
							|| (this._ContactType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactType.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._ContactType.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("ContactType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ContactTypes")]
	public partial class ContactType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ContactType()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ContactType_Contact", Storage="_Contacts", OtherKey="TypeID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactType = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.ContactType = null;
		}
	}
	
	[Table(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<ProvincesAndState> _ProvincesAndStates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._ProvincesAndStates = new EntitySet<ProvincesAndState>(new Action<ProvincesAndState>(this.attach_ProvincesAndStates), new Action<ProvincesAndState>(this.detach_ProvincesAndStates));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Country_ProvincesAndState", Storage="_ProvincesAndStates", OtherKey="CountryID")]
		public EntitySet<ProvincesAndState> ProvincesAndStates
		{
			get
			{
				return this._ProvincesAndStates;
			}
			set
			{
				this._ProvincesAndStates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProvincesAndStates(ProvincesAndState entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_ProvincesAndStates(ProvincesAndState entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.ProvincesAndStates")]
	public partial class ProvincesAndState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private long _CountryID;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIDChanging(long value);
    partial void OnCountryIDChanged();
    #endregion
		
		public ProvincesAndState()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="BigInt NOT NULL")]
		public long CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Association(Name="ProvincesAndState_Address", Storage="_Addresses", OtherKey="ProvinceStateID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[Association(Name="Country_ProvincesAndState", Storage="_Country", ThisKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.ProvincesAndStates.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.ProvincesAndStates.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(long);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.ProvincesAndState = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.ProvincesAndState = null;
		}
	}
	
	[Table(Name="dbo.RateDiscounts")]
	public partial class RateDiscount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CompanyID;
		
		private System.Nullable<double> _Hourly;
		
		private System.Nullable<double> _Daily;
		
		private System.Nullable<double> _Weekly;
		
		private System.Nullable<double> _Monthly;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnHourlyChanging(System.Nullable<double> value);
    partial void OnHourlyChanged();
    partial void OnDailyChanging(System.Nullable<double> value);
    partial void OnDailyChanged();
    partial void OnWeeklyChanging(System.Nullable<double> value);
    partial void OnWeeklyChanged();
    partial void OnMonthlyChanging(System.Nullable<double> value);
    partial void OnMonthlyChanged();
    #endregion
		
		public RateDiscount()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Hourly", DbType="Float")]
		public System.Nullable<double> Hourly
		{
			get
			{
				return this._Hourly;
			}
			set
			{
				if ((this._Hourly != value))
				{
					this.OnHourlyChanging(value);
					this.SendPropertyChanging();
					this._Hourly = value;
					this.SendPropertyChanged("Hourly");
					this.OnHourlyChanged();
				}
			}
		}
		
		[Column(Storage="_Daily", DbType="Float")]
		public System.Nullable<double> Daily
		{
			get
			{
				return this._Daily;
			}
			set
			{
				if ((this._Daily != value))
				{
					this.OnDailyChanging(value);
					this.SendPropertyChanging();
					this._Daily = value;
					this.SendPropertyChanged("Daily");
					this.OnDailyChanged();
				}
			}
		}
		
		[Column(Storage="_Weekly", DbType="Float")]
		public System.Nullable<double> Weekly
		{
			get
			{
				return this._Weekly;
			}
			set
			{
				if ((this._Weekly != value))
				{
					this.OnWeeklyChanging(value);
					this.SendPropertyChanging();
					this._Weekly = value;
					this.SendPropertyChanged("Weekly");
					this.OnWeeklyChanged();
				}
			}
		}
		
		[Column(Storage="_Monthly", DbType="Float")]
		public System.Nullable<double> Monthly
		{
			get
			{
				return this._Monthly;
			}
			set
			{
				if ((this._Monthly != value))
				{
					this.OnMonthlyChanging(value);
					this.SendPropertyChanging();
					this._Monthly = value;
					this.SendPropertyChanged("Monthly");
					this.OnMonthlyChanged();
				}
			}
		}
		
		[Association(Name="Company_RateDiscount", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.RateDiscounts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.RateDiscounts.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ServiceTypes")]
	public partial class ServiceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServiceType()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ServiceType_Service", Storage="_Services", OtherKey="ServiceTypeID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = null;
		}
	}
	
	[Table(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _CompanyID;
		
		private System.Nullable<long> _ServiceTypeID;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<ServiceType> _ServiceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<long> value);
    partial void OnCompanyIDChanged();
    partial void OnServiceTypeIDChanging(System.Nullable<long> value);
    partial void OnServiceTypeIDChanged();
    #endregion
		
		public Service()
		{
			this._Company = default(EntityRef<Company>);
			this._ServiceType = default(EntityRef<ServiceType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt")]
		public System.Nullable<long> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceTypeID", DbType="BigInt")]
		public System.Nullable<long> ServiceTypeID
		{
			get
			{
				return this._ServiceTypeID;
			}
			set
			{
				if ((this._ServiceTypeID != value))
				{
					if (this._ServiceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeID = value;
					this.SendPropertyChanged("ServiceTypeID");
					this.OnServiceTypeIDChanged();
				}
			}
		}
		
		[Association(Name="Company_Service", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="ServiceType_Service", Storage="_ServiceType", ThisKey="ServiceTypeID", IsForeignKey=true)]
		public ServiceType ServiceType
		{
			get
			{
				return this._ServiceType.Entity;
			}
			set
			{
				ServiceType previousValue = this._ServiceType.Entity;
				if (((previousValue != value) 
							|| (this._ServiceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceType.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._ServiceType.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._ServiceTypeID = value.ID;
					}
					else
					{
						this._ServiceTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("ServiceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private EntitySet<Quote> _Quotes;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._Quotes = new EntitySet<Quote>(new Action<Quote>(this.attach_Quotes), new Action<Quote>(this.detach_Quotes));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(255)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(255)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(355)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="User_Quote", Storage="_Quotes", OtherKey="QuotedByUserID")]
		public EntitySet<Quote> Quotes
		{
			get
			{
				return this._Quotes;
			}
			set
			{
				this._Quotes.Assign(value);
			}
		}
		
		[Association(Name="User_Job", Storage="_Jobs", OtherKey="QuotedByUserID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.QuoteSupplements")]
	public partial class QuoteSupplement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _QuoteID;
		
		private string _Name;
		
		private string _Details;
		
		private System.Nullable<long> _BillingTypeID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _CostPerItem;
		
		private EntityRef<BillingType> _BillingType;
		
		private EntityRef<Quote> _Quote;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnQuoteIDChanging(long value);
    partial void OnQuoteIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnBillingTypeIDChanging(System.Nullable<long> value);
    partial void OnBillingTypeIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnCostPerItemChanging(System.Nullable<decimal> value);
    partial void OnCostPerItemChanged();
    #endregion
		
		public QuoteSupplement()
		{
			this._BillingType = default(EntityRef<BillingType>);
			this._Quote = default(EntityRef<Quote>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuoteID", DbType="BigInt NOT NULL")]
		public long QuoteID
		{
			get
			{
				return this._QuoteID;
			}
			set
			{
				if ((this._QuoteID != value))
				{
					if (this._Quote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteID = value;
					this.SendPropertyChanged("QuoteID");
					this.OnQuoteIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="VarChar(700)")]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_BillingTypeID", DbType="BigInt")]
		public System.Nullable<long> BillingTypeID
		{
			get
			{
				return this._BillingTypeID;
			}
			set
			{
				if ((this._BillingTypeID != value))
				{
					if (this._BillingType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BillingTypeID = value;
					this.SendPropertyChanged("BillingTypeID");
					this.OnBillingTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_CostPerItem", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CostPerItem
		{
			get
			{
				return this._CostPerItem;
			}
			set
			{
				if ((this._CostPerItem != value))
				{
					this.OnCostPerItemChanging(value);
					this.SendPropertyChanging();
					this._CostPerItem = value;
					this.SendPropertyChanged("CostPerItem");
					this.OnCostPerItemChanged();
				}
			}
		}
		
		[Association(Name="BillingType_QuoteSupplement", Storage="_BillingType", ThisKey="BillingTypeID", IsForeignKey=true)]
		public BillingType BillingType
		{
			get
			{
				return this._BillingType.Entity;
			}
			set
			{
				BillingType previousValue = this._BillingType.Entity;
				if (((previousValue != value) 
							|| (this._BillingType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BillingType.Entity = null;
						previousValue.QuoteSupplements.Remove(this);
					}
					this._BillingType.Entity = value;
					if ((value != null))
					{
						value.QuoteSupplements.Add(this);
						this._BillingTypeID = value.ID;
					}
					else
					{
						this._BillingTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("BillingType");
				}
			}
		}
		
		[Association(Name="Quote_QuoteSupplement", Storage="_Quote", ThisKey="QuoteID", IsForeignKey=true)]
		public Quote Quote
		{
			get
			{
				return this._Quote.Entity;
			}
			set
			{
				Quote previousValue = this._Quote.Entity;
				if (((previousValue != value) 
							|| (this._Quote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quote.Entity = null;
						previousValue.QuoteSupplements.Remove(this);
					}
					this._Quote.Entity = value;
					if ((value != null))
					{
						value.QuoteSupplements.Add(this);
						this._QuoteID = value.ID;
					}
					else
					{
						this._QuoteID = default(long);
					}
					this.SendPropertyChanged("Quote");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BillingTypes")]
	public partial class BillingType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<QuoteSupplement> _QuoteSupplements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BillingType()
		{
			this._QuoteSupplements = new EntitySet<QuoteSupplement>(new Action<QuoteSupplement>(this.attach_QuoteSupplements), new Action<QuoteSupplement>(this.detach_QuoteSupplements));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="BillingType_QuoteSupplement", Storage="_QuoteSupplements", OtherKey="BillingTypeID")]
		public EntitySet<QuoteSupplement> QuoteSupplements
		{
			get
			{
				return this._QuoteSupplements;
			}
			set
			{
				this._QuoteSupplements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuoteSupplements(QuoteSupplement entity)
		{
			this.SendPropertyChanging();
			entity.BillingType = this;
		}
		
		private void detach_QuoteSupplements(QuoteSupplement entity)
		{
			this.SendPropertyChanging();
			entity.BillingType = null;
		}
	}
	
	[Table(Name="dbo.QuoteCommodities")]
	public partial class QuoteCommodity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _QuoteID;
		
		private System.Nullable<long> _OriginalCommodityID;
		
		private string _DepartureSiteName;
		
		private string _DepartureAddress;
		
		private string _ArrivalSiteName;
		
		private string _ArrivalAddress;
		
		private string _Name;
		
		private System.Nullable<decimal> _Value;
		
		private string _Serial;
		
		private string _Unit;
		
		private string _Owner;
		
		private string _LastLocation;
		
		private string _LastAddress;
		
		private System.Nullable<double> _Length;
		
		private System.Nullable<double> _Width;
		
		private System.Nullable<double> _Height;
		
		private System.Nullable<double> _Weight;
		
		private System.Nullable<byte> _SizeEstimated;
		
		private System.Nullable<byte> _WeightEstimated;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _CostPerItem;
		
		private string _Notes;
		
		private EntityRef<Quote> _Quote;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnQuoteIDChanging(long value);
    partial void OnQuoteIDChanged();
    partial void OnOriginalCommodityIDChanging(System.Nullable<long> value);
    partial void OnOriginalCommodityIDChanged();
    partial void OnDepartureSiteNameChanging(string value);
    partial void OnDepartureSiteNameChanged();
    partial void OnDepartureAddressChanging(string value);
    partial void OnDepartureAddressChanged();
    partial void OnArrivalSiteNameChanging(string value);
    partial void OnArrivalSiteNameChanged();
    partial void OnArrivalAddressChanging(string value);
    partial void OnArrivalAddressChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    partial void OnSerialChanging(string value);
    partial void OnSerialChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnLastLocationChanging(string value);
    partial void OnLastLocationChanged();
    partial void OnLastAddressChanging(string value);
    partial void OnLastAddressChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(System.Nullable<double> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnSizeEstimatedChanging(System.Nullable<byte> value);
    partial void OnSizeEstimatedChanged();
    partial void OnWeightEstimatedChanging(System.Nullable<byte> value);
    partial void OnWeightEstimatedChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnCostPerItemChanging(System.Nullable<decimal> value);
    partial void OnCostPerItemChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public QuoteCommodity()
		{
			this._Quote = default(EntityRef<Quote>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuoteID", DbType="BigInt NOT NULL")]
		public long QuoteID
		{
			get
			{
				return this._QuoteID;
			}
			set
			{
				if ((this._QuoteID != value))
				{
					if (this._Quote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteID = value;
					this.SendPropertyChanged("QuoteID");
					this.OnQuoteIDChanged();
				}
			}
		}
		
		[Column(Storage="_OriginalCommodityID", DbType="BigInt")]
		public System.Nullable<long> OriginalCommodityID
		{
			get
			{
				return this._OriginalCommodityID;
			}
			set
			{
				if ((this._OriginalCommodityID != value))
				{
					this.OnOriginalCommodityIDChanging(value);
					this.SendPropertyChanging();
					this._OriginalCommodityID = value;
					this.SendPropertyChanged("OriginalCommodityID");
					this.OnOriginalCommodityIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartureSiteName", DbType="VarChar(255)")]
		public string DepartureSiteName
		{
			get
			{
				return this._DepartureSiteName;
			}
			set
			{
				if ((this._DepartureSiteName != value))
				{
					this.OnDepartureSiteNameChanging(value);
					this.SendPropertyChanging();
					this._DepartureSiteName = value;
					this.SendPropertyChanged("DepartureSiteName");
					this.OnDepartureSiteNameChanged();
				}
			}
		}
		
		[Column(Storage="_DepartureAddress", DbType="VarChar(255)")]
		public string DepartureAddress
		{
			get
			{
				return this._DepartureAddress;
			}
			set
			{
				if ((this._DepartureAddress != value))
				{
					this.OnDepartureAddressChanging(value);
					this.SendPropertyChanging();
					this._DepartureAddress = value;
					this.SendPropertyChanged("DepartureAddress");
					this.OnDepartureAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ArrivalSiteName", DbType="VarChar(255)")]
		public string ArrivalSiteName
		{
			get
			{
				return this._ArrivalSiteName;
			}
			set
			{
				if ((this._ArrivalSiteName != value))
				{
					this.OnArrivalSiteNameChanging(value);
					this.SendPropertyChanging();
					this._ArrivalSiteName = value;
					this.SendPropertyChanged("ArrivalSiteName");
					this.OnArrivalSiteNameChanged();
				}
			}
		}
		
		[Column(Storage="_ArrivalAddress", DbType="VarChar(255)")]
		public string ArrivalAddress
		{
			get
			{
				return this._ArrivalAddress;
			}
			set
			{
				if ((this._ArrivalAddress != value))
				{
					this.OnArrivalAddressChanging(value);
					this.SendPropertyChanging();
					this._ArrivalAddress = value;
					this.SendPropertyChanged("ArrivalAddress");
					this.OnArrivalAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Serial", DbType="VarChar(255)")]
		public string Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="VarChar(255)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="VarChar(255)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_LastLocation", DbType="VarChar(255)")]
		public string LastLocation
		{
			get
			{
				return this._LastLocation;
			}
			set
			{
				if ((this._LastLocation != value))
				{
					this.OnLastLocationChanging(value);
					this.SendPropertyChanging();
					this._LastLocation = value;
					this.SendPropertyChanged("LastLocation");
					this.OnLastLocationChanged();
				}
			}
		}
		
		[Column(Storage="_LastAddress", DbType="VarChar(255)")]
		public string LastAddress
		{
			get
			{
				return this._LastAddress;
			}
			set
			{
				if ((this._LastAddress != value))
				{
					this.OnLastAddressChanging(value);
					this.SendPropertyChanging();
					this._LastAddress = value;
					this.SendPropertyChanged("LastAddress");
					this.OnLastAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Float")]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Float")]
		public System.Nullable<double> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_SizeEstimated", DbType="TinyInt")]
		public System.Nullable<byte> SizeEstimated
		{
			get
			{
				return this._SizeEstimated;
			}
			set
			{
				if ((this._SizeEstimated != value))
				{
					this.OnSizeEstimatedChanging(value);
					this.SendPropertyChanging();
					this._SizeEstimated = value;
					this.SendPropertyChanged("SizeEstimated");
					this.OnSizeEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_WeightEstimated", DbType="TinyInt")]
		public System.Nullable<byte> WeightEstimated
		{
			get
			{
				return this._WeightEstimated;
			}
			set
			{
				if ((this._WeightEstimated != value))
				{
					this.OnWeightEstimatedChanging(value);
					this.SendPropertyChanging();
					this._WeightEstimated = value;
					this.SendPropertyChanged("WeightEstimated");
					this.OnWeightEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_CostPerItem", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CostPerItem
		{
			get
			{
				return this._CostPerItem;
			}
			set
			{
				if ((this._CostPerItem != value))
				{
					this.OnCostPerItemChanging(value);
					this.SendPropertyChanging();
					this._CostPerItem = value;
					this.SendPropertyChanged("CostPerItem");
					this.OnCostPerItemChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Quote_QuoteCommodity", Storage="_Quote", ThisKey="QuoteID", IsForeignKey=true)]
		public Quote Quote
		{
			get
			{
				return this._Quote.Entity;
			}
			set
			{
				Quote previousValue = this._Quote.Entity;
				if (((previousValue != value) 
							|| (this._Quote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quote.Entity = null;
						previousValue.QuoteCommodities.Remove(this);
					}
					this._Quote.Entity = value;
					if ((value != null))
					{
						value.QuoteCommodities.Add(this);
						this._QuoteID = value.ID;
					}
					else
					{
						this._QuoteID = default(long);
					}
					this.SendPropertyChanged("Quote");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Dispatches")]
	public partial class Dispatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _JobID;
		
		private System.Nullable<long> _LoadID;
		
		private string _ServiceType;
		
		private string _Description;
		
		private string _Notes;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<Load> _Load;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnJobIDChanging(System.Nullable<long> value);
    partial void OnJobIDChanged();
    partial void OnLoadIDChanging(System.Nullable<long> value);
    partial void OnLoadIDChanged();
    partial void OnServiceTypeChanging(string value);
    partial void OnServiceTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Dispatch()
		{
			this._Job = default(EntityRef<Job>);
			this._Load = default(EntityRef<Load>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_JobID", DbType="BigInt")]
		public System.Nullable<long> JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[Column(Storage="_LoadID", DbType="BigInt")]
		public System.Nullable<long> LoadID
		{
			get
			{
				return this._LoadID;
			}
			set
			{
				if ((this._LoadID != value))
				{
					if (this._Load.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoadIDChanging(value);
					this.SendPropertyChanging();
					this._LoadID = value;
					this.SendPropertyChanged("LoadID");
					this.OnLoadIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceType", DbType="VarChar(100)")]
		public string ServiceType
		{
			get
			{
				return this._ServiceType;
			}
			set
			{
				if ((this._ServiceType != value))
				{
					this.OnServiceTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceType = value;
					this.SendPropertyChanged("ServiceType");
					this.OnServiceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Job_Dispatch", Storage="_Job", ThisKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Dispatches.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Dispatches.Add(this);
						this._JobID = value.ID;
					}
					else
					{
						this._JobID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[Association(Name="Load_Dispatch", Storage="_Load", ThisKey="LoadID", IsForeignKey=true)]
		public Load Load
		{
			get
			{
				return this._Load.Entity;
			}
			set
			{
				Load previousValue = this._Load.Entity;
				if (((previousValue != value) 
							|| (this._Load.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Load.Entity = null;
						previousValue.Dispatches.Remove(this);
					}
					this._Load.Entity = value;
					if ((value != null))
					{
						value.Dispatches.Add(this);
						this._LoadID = value.ID;
					}
					else
					{
						this._LoadID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Load");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Quotes")]
	public partial class Quote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CompanyID;
		
		private int _Number;
		
		private System.Nullable<int> _Revision;
		
		private System.Nullable<long> _CareOfCompanyID;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
		private System.Nullable<System.DateTime> _ExpirationDate;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<long> _QuotedByUserID;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<byte> _IsPrinted;
		
		private EntitySet<QuoteSupplement> _QuoteSupplements;
		
		private EntitySet<QuoteCommodity> _QuoteCommodities;
		
		private EntitySet<Job> _Jobs;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Company> _Company1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnRevisionChanging(System.Nullable<int> value);
    partial void OnRevisionChanged();
    partial void OnCareOfCompanyIDChanging(System.Nullable<long> value);
    partial void OnCareOfCompanyIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    partial void OnExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationDateChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnQuotedByUserIDChanging(System.Nullable<long> value);
    partial void OnQuotedByUserIDChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnIsPrintedChanging(System.Nullable<byte> value);
    partial void OnIsPrintedChanged();
    #endregion
		
		public Quote()
		{
			this._QuoteSupplements = new EntitySet<QuoteSupplement>(new Action<QuoteSupplement>(this.attach_QuoteSupplements), new Action<QuoteSupplement>(this.detach_QuoteSupplements));
			this._QuoteCommodities = new EntitySet<QuoteCommodity>(new Action<QuoteCommodity>(this.attach_QuoteCommodities), new Action<QuoteCommodity>(this.detach_QuoteCommodities));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._Company = default(EntityRef<Company>);
			this._Company1 = default(EntityRef<Company>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Revision", DbType="Int")]
		public System.Nullable<int> Revision
		{
			get
			{
				return this._Revision;
			}
			set
			{
				if ((this._Revision != value))
				{
					this.OnRevisionChanging(value);
					this.SendPropertyChanging();
					this._Revision = value;
					this.SendPropertyChanged("Revision");
					this.OnRevisionChanged();
				}
			}
		}
		
		[Column(Storage="_CareOfCompanyID", DbType="BigInt")]
		public System.Nullable<long> CareOfCompanyID
		{
			get
			{
				return this._CareOfCompanyID;
			}
			set
			{
				if ((this._CareOfCompanyID != value))
				{
					if (this._Company1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCareOfCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CareOfCompanyID = value;
					this.SendPropertyChanged("CareOfCompanyID");
					this.OnCareOfCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_ExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_QuotedByUserID", DbType="BigInt")]
		public System.Nullable<long> QuotedByUserID
		{
			get
			{
				return this._QuotedByUserID;
			}
			set
			{
				if ((this._QuotedByUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuotedByUserIDChanging(value);
					this.SendPropertyChanging();
					this._QuotedByUserID = value;
					this.SendPropertyChanged("QuotedByUserID");
					this.OnQuotedByUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_IsPrinted", DbType="TinyInt")]
		public System.Nullable<byte> IsPrinted
		{
			get
			{
				return this._IsPrinted;
			}
			set
			{
				if ((this._IsPrinted != value))
				{
					this.OnIsPrintedChanging(value);
					this.SendPropertyChanging();
					this._IsPrinted = value;
					this.SendPropertyChanged("IsPrinted");
					this.OnIsPrintedChanged();
				}
			}
		}
		
		[Association(Name="Quote_QuoteSupplement", Storage="_QuoteSupplements", OtherKey="QuoteID")]
		public EntitySet<QuoteSupplement> QuoteSupplements
		{
			get
			{
				return this._QuoteSupplements;
			}
			set
			{
				this._QuoteSupplements.Assign(value);
			}
		}
		
		[Association(Name="Quote_QuoteCommodity", Storage="_QuoteCommodities", OtherKey="QuoteID")]
		public EntitySet<QuoteCommodity> QuoteCommodities
		{
			get
			{
				return this._QuoteCommodities;
			}
			set
			{
				this._QuoteCommodities.Assign(value);
			}
		}
		
		[Association(Name="Quote_Job", Storage="_Jobs", OtherKey="QuoteID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[Association(Name="Company_Quote", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Quotes.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Quotes.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(long);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Company_Quote1", Storage="_Company1", ThisKey="CareOfCompanyID", IsForeignKey=true)]
		public Company Company1
		{
			get
			{
				return this._Company1.Entity;
			}
			set
			{
				Company previousValue = this._Company1.Entity;
				if (((previousValue != value) 
							|| (this._Company1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company1.Entity = null;
						previousValue.Quotes1.Remove(this);
					}
					this._Company1.Entity = value;
					if ((value != null))
					{
						value.Quotes1.Add(this);
						this._CareOfCompanyID = value.ID;
					}
					else
					{
						this._CareOfCompanyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Company1");
				}
			}
		}
		
		[Association(Name="User_Quote", Storage="_User", ThisKey="QuotedByUserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Quotes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Quotes.Add(this);
						this._QuotedByUserID = value.ID;
					}
					else
					{
						this._QuotedByUserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuoteSupplements(QuoteSupplement entity)
		{
			this.SendPropertyChanging();
			entity.Quote = this;
		}
		
		private void detach_QuoteSupplements(QuoteSupplement entity)
		{
			this.SendPropertyChanging();
			entity.Quote = null;
		}
		
		private void attach_QuoteCommodities(QuoteCommodity entity)
		{
			this.SendPropertyChanging();
			entity.Quote = this;
		}
		
		private void detach_QuoteCommodities(QuoteCommodity entity)
		{
			this.SendPropertyChanging();
			entity.Quote = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Quote = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Quote = null;
		}
	}
	
	[Table(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _Number;
		
		private System.Nullable<long> _CompanyID;
		
		private System.Nullable<long> _QuoteID;
		
		private System.Nullable<long> _CareOfCompanyID;
		
		private System.Nullable<long> _QuotedByUserID;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<Dispatch> _Dispatches;
		
		private EntitySet<JobCommodity> _JobCommodities;
		
		private EntitySet<Load> _Loads;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Company> _Company1;
		
		private EntityRef<Quote> _Quote;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnCompanyIDChanging(System.Nullable<long> value);
    partial void OnCompanyIDChanged();
    partial void OnQuoteIDChanging(System.Nullable<long> value);
    partial void OnQuoteIDChanged();
    partial void OnCareOfCompanyIDChanging(System.Nullable<long> value);
    partial void OnCareOfCompanyIDChanged();
    partial void OnQuotedByUserIDChanging(System.Nullable<long> value);
    partial void OnQuotedByUserIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public Job()
		{
			this._Dispatches = new EntitySet<Dispatch>(new Action<Dispatch>(this.attach_Dispatches), new Action<Dispatch>(this.detach_Dispatches));
			this._JobCommodities = new EntitySet<JobCommodity>(new Action<JobCommodity>(this.attach_JobCommodities), new Action<JobCommodity>(this.detach_JobCommodities));
			this._Loads = new EntitySet<Load>(new Action<Load>(this.attach_Loads), new Action<Load>(this.detach_Loads));
			this._Company = default(EntityRef<Company>);
			this._Company1 = default(EntityRef<Company>);
			this._Quote = default(EntityRef<Quote>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt")]
		public System.Nullable<long> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuoteID", DbType="BigInt")]
		public System.Nullable<long> QuoteID
		{
			get
			{
				return this._QuoteID;
			}
			set
			{
				if ((this._QuoteID != value))
				{
					if (this._Quote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteID = value;
					this.SendPropertyChanged("QuoteID");
					this.OnQuoteIDChanged();
				}
			}
		}
		
		[Column(Storage="_CareOfCompanyID", DbType="BigInt")]
		public System.Nullable<long> CareOfCompanyID
		{
			get
			{
				return this._CareOfCompanyID;
			}
			set
			{
				if ((this._CareOfCompanyID != value))
				{
					if (this._Company1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCareOfCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CareOfCompanyID = value;
					this.SendPropertyChanged("CareOfCompanyID");
					this.OnCareOfCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuotedByUserID", DbType="BigInt")]
		public System.Nullable<long> QuotedByUserID
		{
			get
			{
				return this._QuotedByUserID;
			}
			set
			{
				if ((this._QuotedByUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuotedByUserIDChanging(value);
					this.SendPropertyChanging();
					this._QuotedByUserID = value;
					this.SendPropertyChanged("QuotedByUserID");
					this.OnQuotedByUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="Job_Dispatch", Storage="_Dispatches", OtherKey="JobID")]
		public EntitySet<Dispatch> Dispatches
		{
			get
			{
				return this._Dispatches;
			}
			set
			{
				this._Dispatches.Assign(value);
			}
		}
		
		[Association(Name="Job_JobCommodity", Storage="_JobCommodities", OtherKey="JobID")]
		public EntitySet<JobCommodity> JobCommodities
		{
			get
			{
				return this._JobCommodities;
			}
			set
			{
				this._JobCommodities.Assign(value);
			}
		}
		
		[Association(Name="Job_Load", Storage="_Loads", OtherKey="JobID")]
		public EntitySet<Load> Loads
		{
			get
			{
				return this._Loads;
			}
			set
			{
				this._Loads.Assign(value);
			}
		}
		
		[Association(Name="Company_Job", Storage="_Company", ThisKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[Association(Name="Company_Job1", Storage="_Company1", ThisKey="CareOfCompanyID", IsForeignKey=true)]
		public Company Company1
		{
			get
			{
				return this._Company1.Entity;
			}
			set
			{
				Company previousValue = this._Company1.Entity;
				if (((previousValue != value) 
							|| (this._Company1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company1.Entity = null;
						previousValue.Jobs1.Remove(this);
					}
					this._Company1.Entity = value;
					if ((value != null))
					{
						value.Jobs1.Add(this);
						this._CareOfCompanyID = value.ID;
					}
					else
					{
						this._CareOfCompanyID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Company1");
				}
			}
		}
		
		[Association(Name="Quote_Job", Storage="_Quote", ThisKey="QuoteID", IsForeignKey=true)]
		public Quote Quote
		{
			get
			{
				return this._Quote.Entity;
			}
			set
			{
				Quote previousValue = this._Quote.Entity;
				if (((previousValue != value) 
							|| (this._Quote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quote.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._Quote.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._QuoteID = value.ID;
					}
					else
					{
						this._QuoteID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Quote");
				}
			}
		}
		
		[Association(Name="User_Job", Storage="_User", ThisKey="QuotedByUserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._QuotedByUserID = value.ID;
					}
					else
					{
						this._QuotedByUserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dispatches(Dispatch entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Dispatches(Dispatch entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_JobCommodities(JobCommodity entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobCommodities(JobCommodity entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[Table(Name="dbo.WheelTypes")]
	public partial class WheelType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Load> _Loads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public WheelType()
		{
			this._Loads = new EntitySet<Load>(new Action<Load>(this.attach_Loads), new Action<Load>(this.detach_Loads));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="WheelType_Load", Storage="_Loads", OtherKey="WheelTypeID")]
		public EntitySet<Load> Loads
		{
			get
			{
				return this._Loads;
			}
			set
			{
				this._Loads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.WheelType = this;
		}
		
		private void detach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.WheelType = null;
		}
	}
	
	[Table(Name="dbo.TrailerCombinations")]
	public partial class TrailerCombination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Load> _Loads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TrailerCombination()
		{
			this._Loads = new EntitySet<Load>(new Action<Load>(this.attach_Loads), new Action<Load>(this.detach_Loads));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="TrailerCombination_Load", Storage="_Loads", OtherKey="TrailerCombinationID")]
		public EntitySet<Load> Loads
		{
			get
			{
				return this._Loads;
			}
			set
			{
				this._Loads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.TrailerCombination = this;
		}
		
		private void detach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.TrailerCombination = null;
		}
	}
	
	[Table(Name="dbo.Units")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Load> _Loads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Unit()
		{
			this._Loads = new EntitySet<Load>(new Action<Load>(this.attach_Loads), new Action<Load>(this.detach_Loads));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(75)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Unit_Load", Storage="_Loads", OtherKey="UnitID")]
		public EntitySet<Load> Loads
		{
			get
			{
				return this._Loads;
			}
			set
			{
				this._Loads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	[Table(Name="dbo.Seasons")]
	public partial class Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private EntitySet<Load> _Loads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Season()
		{
			this._Loads = new EntitySet<Load>(new Action<Load>(this.attach_Loads), new Action<Load>(this.detach_Loads));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(75)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Season_Load", Storage="_Loads", OtherKey="SeasonID")]
		public EntitySet<Load> Loads
		{
			get
			{
				return this._Loads;
			}
			set
			{
				this._Loads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_Loads(Load entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
	}
	
	[Table(Name="dbo.JobCommodities")]
	public partial class JobCommodity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _JobID;
		
		private System.Nullable<long> _LoadID;
		
		private System.Nullable<long> _OriginalCommodityID;
		
		private string _Name;
		
		private System.Nullable<decimal> _Value;
		
		private string _Serial;
		
		private string _Unit;
		
		private string _Owner;
		
		private string _LastLocation;
		
		private string _LastAddress;
		
		private System.Nullable<double> _Length;
		
		private System.Nullable<double> _Width;
		
		private System.Nullable<double> _Height;
		
		private System.Nullable<double> _Weight;
		
		private System.Nullable<byte> _SizeEstimated;
		
		private System.Nullable<byte> _WeightEstimated;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _CostPerItem;
		
		private string _LoadSiteName;
		
		private string _LoadAddress;
		
		private string _LoadBy;
		
		private string _LoadMethod;
		
		private System.Nullable<System.DateTime> _LoadDate;
		
		private string _LoadInstrucitons;
		
		private string _LoadRoute;
		
		private string _UnloadSiteName;
		
		private string _UnloadAddress;
		
		private string _UnloadBy;
		
		private System.Nullable<System.DateTime> _UnloadDate;
		
		private string _UnloadInstructions;
		
		private string _UnloadRoute;
		
		private string _Notes;
		
		private EntityRef<Commodity> _Commodity;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<Load> _Load;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnJobIDChanging(long value);
    partial void OnJobIDChanged();
    partial void OnLoadIDChanging(System.Nullable<long> value);
    partial void OnLoadIDChanged();
    partial void OnOriginalCommodityIDChanging(System.Nullable<long> value);
    partial void OnOriginalCommodityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    partial void OnSerialChanging(string value);
    partial void OnSerialChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnLastLocationChanging(string value);
    partial void OnLastLocationChanged();
    partial void OnLastAddressChanging(string value);
    partial void OnLastAddressChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(System.Nullable<double> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    partial void OnSizeEstimatedChanging(System.Nullable<byte> value);
    partial void OnSizeEstimatedChanged();
    partial void OnWeightEstimatedChanging(System.Nullable<byte> value);
    partial void OnWeightEstimatedChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnCostPerItemChanging(System.Nullable<decimal> value);
    partial void OnCostPerItemChanged();
    partial void OnLoadSiteNameChanging(string value);
    partial void OnLoadSiteNameChanged();
    partial void OnLoadAddressChanging(string value);
    partial void OnLoadAddressChanged();
    partial void OnLoadByChanging(string value);
    partial void OnLoadByChanged();
    partial void OnLoadMethodChanging(string value);
    partial void OnLoadMethodChanged();
    partial void OnLoadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLoadDateChanged();
    partial void OnLoadInstrucitonsChanging(string value);
    partial void OnLoadInstrucitonsChanged();
    partial void OnLoadRouteChanging(string value);
    partial void OnLoadRouteChanged();
    partial void OnUnloadSiteNameChanging(string value);
    partial void OnUnloadSiteNameChanged();
    partial void OnUnloadAddressChanging(string value);
    partial void OnUnloadAddressChanged();
    partial void OnUnloadByChanging(string value);
    partial void OnUnloadByChanged();
    partial void OnUnloadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUnloadDateChanged();
    partial void OnUnloadInstructionsChanging(string value);
    partial void OnUnloadInstructionsChanged();
    partial void OnUnloadRouteChanging(string value);
    partial void OnUnloadRouteChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public JobCommodity()
		{
			this._Commodity = default(EntityRef<Commodity>);
			this._Job = default(EntityRef<Job>);
			this._Load = default(EntityRef<Load>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_JobID", DbType="BigInt NOT NULL")]
		public long JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[Column(Storage="_LoadID", DbType="BigInt")]
		public System.Nullable<long> LoadID
		{
			get
			{
				return this._LoadID;
			}
			set
			{
				if ((this._LoadID != value))
				{
					if (this._Load.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoadIDChanging(value);
					this.SendPropertyChanging();
					this._LoadID = value;
					this.SendPropertyChanged("LoadID");
					this.OnLoadIDChanged();
				}
			}
		}
		
		[Column(Storage="_OriginalCommodityID", DbType="BigInt")]
		public System.Nullable<long> OriginalCommodityID
		{
			get
			{
				return this._OriginalCommodityID;
			}
			set
			{
				if ((this._OriginalCommodityID != value))
				{
					if (this._Commodity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOriginalCommodityIDChanging(value);
					this.SendPropertyChanging();
					this._OriginalCommodityID = value;
					this.SendPropertyChanged("OriginalCommodityID");
					this.OnOriginalCommodityIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Serial", DbType="VarChar(255)")]
		public string Serial
		{
			get
			{
				return this._Serial;
			}
			set
			{
				if ((this._Serial != value))
				{
					this.OnSerialChanging(value);
					this.SendPropertyChanging();
					this._Serial = value;
					this.SendPropertyChanged("Serial");
					this.OnSerialChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="VarChar(255)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="VarChar(255)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_LastLocation", DbType="VarChar(255)")]
		public string LastLocation
		{
			get
			{
				return this._LastLocation;
			}
			set
			{
				if ((this._LastLocation != value))
				{
					this.OnLastLocationChanging(value);
					this.SendPropertyChanging();
					this._LastLocation = value;
					this.SendPropertyChanged("LastLocation");
					this.OnLastLocationChanged();
				}
			}
		}
		
		[Column(Storage="_LastAddress", DbType="VarChar(255)")]
		public string LastAddress
		{
			get
			{
				return this._LastAddress;
			}
			set
			{
				if ((this._LastAddress != value))
				{
					this.OnLastAddressChanging(value);
					this.SendPropertyChanging();
					this._LastAddress = value;
					this.SendPropertyChanged("LastAddress");
					this.OnLastAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Float")]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Float")]
		public System.Nullable<double> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_SizeEstimated", DbType="TinyInt")]
		public System.Nullable<byte> SizeEstimated
		{
			get
			{
				return this._SizeEstimated;
			}
			set
			{
				if ((this._SizeEstimated != value))
				{
					this.OnSizeEstimatedChanging(value);
					this.SendPropertyChanging();
					this._SizeEstimated = value;
					this.SendPropertyChanged("SizeEstimated");
					this.OnSizeEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_WeightEstimated", DbType="TinyInt")]
		public System.Nullable<byte> WeightEstimated
		{
			get
			{
				return this._WeightEstimated;
			}
			set
			{
				if ((this._WeightEstimated != value))
				{
					this.OnWeightEstimatedChanging(value);
					this.SendPropertyChanging();
					this._WeightEstimated = value;
					this.SendPropertyChanged("WeightEstimated");
					this.OnWeightEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_CostPerItem", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> CostPerItem
		{
			get
			{
				return this._CostPerItem;
			}
			set
			{
				if ((this._CostPerItem != value))
				{
					this.OnCostPerItemChanging(value);
					this.SendPropertyChanging();
					this._CostPerItem = value;
					this.SendPropertyChanged("CostPerItem");
					this.OnCostPerItemChanged();
				}
			}
		}
		
		[Column(Storage="_LoadSiteName", DbType="VarChar(255)")]
		public string LoadSiteName
		{
			get
			{
				return this._LoadSiteName;
			}
			set
			{
				if ((this._LoadSiteName != value))
				{
					this.OnLoadSiteNameChanging(value);
					this.SendPropertyChanging();
					this._LoadSiteName = value;
					this.SendPropertyChanged("LoadSiteName");
					this.OnLoadSiteNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoadAddress", DbType="VarChar(255)")]
		public string LoadAddress
		{
			get
			{
				return this._LoadAddress;
			}
			set
			{
				if ((this._LoadAddress != value))
				{
					this.OnLoadAddressChanging(value);
					this.SendPropertyChanging();
					this._LoadAddress = value;
					this.SendPropertyChanged("LoadAddress");
					this.OnLoadAddressChanged();
				}
			}
		}
		
		[Column(Storage="_LoadBy", DbType="VarChar(255)")]
		public string LoadBy
		{
			get
			{
				return this._LoadBy;
			}
			set
			{
				if ((this._LoadBy != value))
				{
					this.OnLoadByChanging(value);
					this.SendPropertyChanging();
					this._LoadBy = value;
					this.SendPropertyChanged("LoadBy");
					this.OnLoadByChanged();
				}
			}
		}
		
		[Column(Storage="_LoadMethod", DbType="VarChar(255)")]
		public string LoadMethod
		{
			get
			{
				return this._LoadMethod;
			}
			set
			{
				if ((this._LoadMethod != value))
				{
					this.OnLoadMethodChanging(value);
					this.SendPropertyChanging();
					this._LoadMethod = value;
					this.SendPropertyChanged("LoadMethod");
					this.OnLoadMethodChanged();
				}
			}
		}
		
		[Column(Storage="_LoadDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoadDate
		{
			get
			{
				return this._LoadDate;
			}
			set
			{
				if ((this._LoadDate != value))
				{
					this.OnLoadDateChanging(value);
					this.SendPropertyChanging();
					this._LoadDate = value;
					this.SendPropertyChanged("LoadDate");
					this.OnLoadDateChanged();
				}
			}
		}
		
		[Column(Storage="_LoadInstrucitons", DbType="VarChar(2000)")]
		public string LoadInstrucitons
		{
			get
			{
				return this._LoadInstrucitons;
			}
			set
			{
				if ((this._LoadInstrucitons != value))
				{
					this.OnLoadInstrucitonsChanging(value);
					this.SendPropertyChanging();
					this._LoadInstrucitons = value;
					this.SendPropertyChanged("LoadInstrucitons");
					this.OnLoadInstrucitonsChanged();
				}
			}
		}
		
		[Column(Storage="_LoadRoute", DbType="VarChar(2000)")]
		public string LoadRoute
		{
			get
			{
				return this._LoadRoute;
			}
			set
			{
				if ((this._LoadRoute != value))
				{
					this.OnLoadRouteChanging(value);
					this.SendPropertyChanging();
					this._LoadRoute = value;
					this.SendPropertyChanged("LoadRoute");
					this.OnLoadRouteChanged();
				}
			}
		}
		
		[Column(Storage="_UnloadSiteName", DbType="VarChar(255)")]
		public string UnloadSiteName
		{
			get
			{
				return this._UnloadSiteName;
			}
			set
			{
				if ((this._UnloadSiteName != value))
				{
					this.OnUnloadSiteNameChanging(value);
					this.SendPropertyChanging();
					this._UnloadSiteName = value;
					this.SendPropertyChanged("UnloadSiteName");
					this.OnUnloadSiteNameChanged();
				}
			}
		}
		
		[Column(Storage="_UnloadAddress", DbType="VarChar(255)")]
		public string UnloadAddress
		{
			get
			{
				return this._UnloadAddress;
			}
			set
			{
				if ((this._UnloadAddress != value))
				{
					this.OnUnloadAddressChanging(value);
					this.SendPropertyChanging();
					this._UnloadAddress = value;
					this.SendPropertyChanged("UnloadAddress");
					this.OnUnloadAddressChanged();
				}
			}
		}
		
		[Column(Storage="_UnloadBy", DbType="VarChar(255)")]
		public string UnloadBy
		{
			get
			{
				return this._UnloadBy;
			}
			set
			{
				if ((this._UnloadBy != value))
				{
					this.OnUnloadByChanging(value);
					this.SendPropertyChanging();
					this._UnloadBy = value;
					this.SendPropertyChanged("UnloadBy");
					this.OnUnloadByChanged();
				}
			}
		}
		
		[Column(Storage="_UnloadDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UnloadDate
		{
			get
			{
				return this._UnloadDate;
			}
			set
			{
				if ((this._UnloadDate != value))
				{
					this.OnUnloadDateChanging(value);
					this.SendPropertyChanging();
					this._UnloadDate = value;
					this.SendPropertyChanged("UnloadDate");
					this.OnUnloadDateChanged();
				}
			}
		}
		
		[Column(Storage="_UnloadInstructions", DbType="VarChar(2000)")]
		public string UnloadInstructions
		{
			get
			{
				return this._UnloadInstructions;
			}
			set
			{
				if ((this._UnloadInstructions != value))
				{
					this.OnUnloadInstructionsChanging(value);
					this.SendPropertyChanging();
					this._UnloadInstructions = value;
					this.SendPropertyChanged("UnloadInstructions");
					this.OnUnloadInstructionsChanged();
				}
			}
		}
		
		[Column(Storage="_UnloadRoute", DbType="VarChar(2000)")]
		public string UnloadRoute
		{
			get
			{
				return this._UnloadRoute;
			}
			set
			{
				if ((this._UnloadRoute != value))
				{
					this.OnUnloadRouteChanging(value);
					this.SendPropertyChanging();
					this._UnloadRoute = value;
					this.SendPropertyChanged("UnloadRoute");
					this.OnUnloadRouteChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Association(Name="Commodity_JobCommodity", Storage="_Commodity", ThisKey="OriginalCommodityID", IsForeignKey=true)]
		public Commodity Commodity
		{
			get
			{
				return this._Commodity.Entity;
			}
			set
			{
				Commodity previousValue = this._Commodity.Entity;
				if (((previousValue != value) 
							|| (this._Commodity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commodity.Entity = null;
						previousValue.JobCommodities.Remove(this);
					}
					this._Commodity.Entity = value;
					if ((value != null))
					{
						value.JobCommodities.Add(this);
						this._OriginalCommodityID = value.ID;
					}
					else
					{
						this._OriginalCommodityID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Commodity");
				}
			}
		}
		
		[Association(Name="Job_JobCommodity", Storage="_Job", ThisKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobCommodities.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobCommodities.Add(this);
						this._JobID = value.ID;
					}
					else
					{
						this._JobID = default(long);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[Association(Name="Load_JobCommodity", Storage="_Load", ThisKey="LoadID", IsForeignKey=true)]
		public Load Load
		{
			get
			{
				return this._Load.Entity;
			}
			set
			{
				Load previousValue = this._Load.Entity;
				if (((previousValue != value) 
							|| (this._Load.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Load.Entity = null;
						previousValue.JobCommodities.Remove(this);
					}
					this._Load.Entity = value;
					if ((value != null))
					{
						value.JobCommodities.Add(this);
						this._LoadID = value.ID;
					}
					else
					{
						this._LoadID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Load");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Loads")]
	public partial class Load : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _JobID;
		
		private System.Nullable<long> _UnitID;
		
		private System.Nullable<long> _WheelTypeID;
		
		private System.Nullable<long> _TrailerCombinationID;
		
		private string _Info;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<long> _SeasonID;
		
		private string _Ban;
		
		private string _ServiceDescription;
		
		private string _Notes;
		
		private System.Nullable<int> _WeightSteer;
		
		private System.Nullable<int> _WeightDrive;
		
		private System.Nullable<int> _WeightGroup1;
		
		private System.Nullable<int> _WeightGroup2;
		
		private System.Nullable<int> _WeightGroup3;
		
		private System.Nullable<int> _WeightGroup4;
		
		private System.Nullable<int> _WeightGroup5;
		
		private System.Nullable<int> _WeightGroup6;
		
		private System.Nullable<int> _WeightGroup7;
		
		private System.Nullable<int> _WeightGroup8;
		
		private System.Nullable<int> _WeightGroup9;
		
		private System.Nullable<int> _WeightGroup10;
		
		private System.Nullable<byte> _WeightEstimated;
		
		private System.Nullable<int> _GrossWeight;
		
		private System.Nullable<int> _LoadedLength;
		
		private System.Nullable<int> _LoadedWidth;
		
		private System.Nullable<int> _LoadedHeight;
		
		private EntitySet<Dispatch> _Dispatches;
		
		private EntitySet<JobCommodity> _JobCommodities;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<Season> _Season;
		
		private EntityRef<TrailerCombination> _TrailerCombination;
		
		private EntityRef<Unit> _Unit;
		
		private EntityRef<WheelType> _WheelType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnJobIDChanging(System.Nullable<long> value);
    partial void OnJobIDChanged();
    partial void OnUnitIDChanging(System.Nullable<long> value);
    partial void OnUnitIDChanged();
    partial void OnWheelTypeIDChanging(System.Nullable<long> value);
    partial void OnWheelTypeIDChanged();
    partial void OnTrailerCombinationIDChanging(System.Nullable<long> value);
    partial void OnTrailerCombinationIDChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnSeasonIDChanging(System.Nullable<long> value);
    partial void OnSeasonIDChanged();
    partial void OnBanChanging(string value);
    partial void OnBanChanged();
    partial void OnServiceDescriptionChanging(string value);
    partial void OnServiceDescriptionChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnWeightSteerChanging(System.Nullable<int> value);
    partial void OnWeightSteerChanged();
    partial void OnWeightDriveChanging(System.Nullable<int> value);
    partial void OnWeightDriveChanged();
    partial void OnWeightGroup1Changing(System.Nullable<int> value);
    partial void OnWeightGroup1Changed();
    partial void OnWeightGroup2Changing(System.Nullable<int> value);
    partial void OnWeightGroup2Changed();
    partial void OnWeightGroup3Changing(System.Nullable<int> value);
    partial void OnWeightGroup3Changed();
    partial void OnWeightGroup4Changing(System.Nullable<int> value);
    partial void OnWeightGroup4Changed();
    partial void OnWeightGroup5Changing(System.Nullable<int> value);
    partial void OnWeightGroup5Changed();
    partial void OnWeightGroup6Changing(System.Nullable<int> value);
    partial void OnWeightGroup6Changed();
    partial void OnWeightGroup7Changing(System.Nullable<int> value);
    partial void OnWeightGroup7Changed();
    partial void OnWeightGroup8Changing(System.Nullable<int> value);
    partial void OnWeightGroup8Changed();
    partial void OnWeightGroup9Changing(System.Nullable<int> value);
    partial void OnWeightGroup9Changed();
    partial void OnWeightGroup10Changing(System.Nullable<int> value);
    partial void OnWeightGroup10Changed();
    partial void OnWeightEstimatedChanging(System.Nullable<byte> value);
    partial void OnWeightEstimatedChanged();
    partial void OnGrossWeightChanging(System.Nullable<int> value);
    partial void OnGrossWeightChanged();
    partial void OnLoadedLengthChanging(System.Nullable<int> value);
    partial void OnLoadedLengthChanged();
    partial void OnLoadedWidthChanging(System.Nullable<int> value);
    partial void OnLoadedWidthChanged();
    partial void OnLoadedHeightChanging(System.Nullable<int> value);
    partial void OnLoadedHeightChanged();
    #endregion
		
		public Load()
		{
			this._Dispatches = new EntitySet<Dispatch>(new Action<Dispatch>(this.attach_Dispatches), new Action<Dispatch>(this.detach_Dispatches));
			this._JobCommodities = new EntitySet<JobCommodity>(new Action<JobCommodity>(this.attach_JobCommodities), new Action<JobCommodity>(this.detach_JobCommodities));
			this._Job = default(EntityRef<Job>);
			this._Season = default(EntityRef<Season>);
			this._TrailerCombination = default(EntityRef<TrailerCombination>);
			this._Unit = default(EntityRef<Unit>);
			this._WheelType = default(EntityRef<WheelType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_JobID", DbType="BigInt")]
		public System.Nullable<long> JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[Column(Storage="_UnitID", DbType="BigInt")]
		public System.Nullable<long> UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_WheelTypeID", DbType="BigInt")]
		public System.Nullable<long> WheelTypeID
		{
			get
			{
				return this._WheelTypeID;
			}
			set
			{
				if ((this._WheelTypeID != value))
				{
					if (this._WheelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWheelTypeIDChanging(value);
					this.SendPropertyChanging();
					this._WheelTypeID = value;
					this.SendPropertyChanged("WheelTypeID");
					this.OnWheelTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TrailerCombinationID", DbType="BigInt")]
		public System.Nullable<long> TrailerCombinationID
		{
			get
			{
				return this._TrailerCombinationID;
			}
			set
			{
				if ((this._TrailerCombinationID != value))
				{
					if (this._TrailerCombination.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrailerCombinationIDChanging(value);
					this.SendPropertyChanging();
					this._TrailerCombinationID = value;
					this.SendPropertyChanged("TrailerCombinationID");
					this.OnTrailerCombinationIDChanged();
				}
			}
		}
		
		[Column(Storage="_Info", DbType="VarChar(500)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonID", DbType="BigInt")]
		public System.Nullable<long> SeasonID
		{
			get
			{
				return this._SeasonID;
			}
			set
			{
				if ((this._SeasonID != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIDChanging(value);
					this.SendPropertyChanging();
					this._SeasonID = value;
					this.SendPropertyChanged("SeasonID");
					this.OnSeasonIDChanged();
				}
			}
		}
		
		[Column(Storage="_Ban", DbType="VarChar(15)")]
		public string Ban
		{
			get
			{
				return this._Ban;
			}
			set
			{
				if ((this._Ban != value))
				{
					this.OnBanChanging(value);
					this.SendPropertyChanging();
					this._Ban = value;
					this.SendPropertyChanged("Ban");
					this.OnBanChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceDescription", DbType="VarChar(1000)")]
		public string ServiceDescription
		{
			get
			{
				return this._ServiceDescription;
			}
			set
			{
				if ((this._ServiceDescription != value))
				{
					this.OnServiceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ServiceDescription = value;
					this.SendPropertyChanged("ServiceDescription");
					this.OnServiceDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_WeightSteer", DbType="Int")]
		public System.Nullable<int> WeightSteer
		{
			get
			{
				return this._WeightSteer;
			}
			set
			{
				if ((this._WeightSteer != value))
				{
					this.OnWeightSteerChanging(value);
					this.SendPropertyChanging();
					this._WeightSteer = value;
					this.SendPropertyChanged("WeightSteer");
					this.OnWeightSteerChanged();
				}
			}
		}
		
		[Column(Storage="_WeightDrive", DbType="Int")]
		public System.Nullable<int> WeightDrive
		{
			get
			{
				return this._WeightDrive;
			}
			set
			{
				if ((this._WeightDrive != value))
				{
					this.OnWeightDriveChanging(value);
					this.SendPropertyChanging();
					this._WeightDrive = value;
					this.SendPropertyChanged("WeightDrive");
					this.OnWeightDriveChanged();
				}
			}
		}
		
		[Column(Storage="_WeightGroup1", DbType="Int")]
		public System.Nullable<int> WeightGroup1
		{
			get
			{
				return this._WeightGroup1;
			}
			set
			{
				if ((this._WeightGroup1 != value))
				{
					this.OnWeightGroup1Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup1 = value;
					this.SendPropertyChanged("WeightGroup1");
					this.OnWeightGroup1Changed();
				}
			}
		}
		
		[Column(Storage="_WeightGroup2", DbType="Int")]
		public System.Nullable<int> WeightGroup2
		{
			get
			{
				return this._WeightGroup2;
			}
			set
			{
				if ((this._WeightGroup2 != value))
				{
					this.OnWeightGroup2Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup2 = value;
					this.SendPropertyChanged("WeightGroup2");
					this.OnWeightGroup2Changed();
				}
			}
		}
		
		[Column(Storage="_WeightGroup3", DbType="Int")]
		public System.Nullable<int> WeightGroup3
		{
			get
			{
				return this._WeightGroup3;
			}
			set
			{
				if ((this._WeightGroup3 != value))
				{
					this.OnWeightGroup3Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup3 = value;
					this.SendPropertyChanged("WeightGroup3");
					this.OnWeightGroup3Changed();
				}
			}
		}
		
		[Column(Storage="_WeightGroup4", DbType="Int")]
		public System.Nullable<int> WeightGroup4
		{
			get
			{
				return this._WeightGroup4;
			}
			set
			{
				if ((this._WeightGroup4 != value))
				{
					this.OnWeightGroup4Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup4 = value;
					this.SendPropertyChanged("WeightGroup4");
					this.OnWeightGroup4Changed();
				}
			}
		}
		
		[Column(Storage="_WeightGroup5", DbType="Int")]
		public System.Nullable<int> WeightGroup5
		{
			get
			{
				return this._WeightGroup5;
			}
			set
			{
				if ((this._WeightGroup5 != value))
				{
					this.OnWeightGroup5Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup5 = value;
					this.SendPropertyChanged("WeightGroup5");
					this.OnWeightGroup5Changed();
				}
			}
		}
		
		[Column(Storage="_WeightGroup6", DbType="Int")]
		public System.Nullable<int> WeightGroup6
		{
			get
			{
				return this._WeightGroup6;
			}
			set
			{
				if ((this._WeightGroup6 != value))
				{
					this.OnWeightGroup6Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup6 = value;
					this.SendPropertyChanged("WeightGroup6");
					this.OnWeightGroup6Changed();
				}
			}
		}
		
		[Column(Storage="_WeightGroup7", DbType="Int")]
		public System.Nullable<int> WeightGroup7
		{
			get
			{
				return this._WeightGroup7;
			}
			set
			{
				if ((this._WeightGroup7 != value))
				{
					this.OnWeightGroup7Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup7 = value;
					this.SendPropertyChanged("WeightGroup7");
					this.OnWeightGroup7Changed();
				}
			}
		}
		
		[Column(Storage="_WeightGroup8", DbType="Int")]
		public System.Nullable<int> WeightGroup8
		{
			get
			{
				return this._WeightGroup8;
			}
			set
			{
				if ((this._WeightGroup8 != value))
				{
					this.OnWeightGroup8Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup8 = value;
					this.SendPropertyChanged("WeightGroup8");
					this.OnWeightGroup8Changed();
				}
			}
		}
		
		[Column(Storage="_WeightGroup9", DbType="Int")]
		public System.Nullable<int> WeightGroup9
		{
			get
			{
				return this._WeightGroup9;
			}
			set
			{
				if ((this._WeightGroup9 != value))
				{
					this.OnWeightGroup9Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup9 = value;
					this.SendPropertyChanged("WeightGroup9");
					this.OnWeightGroup9Changed();
				}
			}
		}
		
		[Column(Storage="_WeightGroup10", DbType="Int")]
		public System.Nullable<int> WeightGroup10
		{
			get
			{
				return this._WeightGroup10;
			}
			set
			{
				if ((this._WeightGroup10 != value))
				{
					this.OnWeightGroup10Changing(value);
					this.SendPropertyChanging();
					this._WeightGroup10 = value;
					this.SendPropertyChanged("WeightGroup10");
					this.OnWeightGroup10Changed();
				}
			}
		}
		
		[Column(Storage="_WeightEstimated", DbType="TinyInt")]
		public System.Nullable<byte> WeightEstimated
		{
			get
			{
				return this._WeightEstimated;
			}
			set
			{
				if ((this._WeightEstimated != value))
				{
					this.OnWeightEstimatedChanging(value);
					this.SendPropertyChanging();
					this._WeightEstimated = value;
					this.SendPropertyChanged("WeightEstimated");
					this.OnWeightEstimatedChanged();
				}
			}
		}
		
		[Column(Storage="_GrossWeight", DbType="Int")]
		public System.Nullable<int> GrossWeight
		{
			get
			{
				return this._GrossWeight;
			}
			set
			{
				if ((this._GrossWeight != value))
				{
					this.OnGrossWeightChanging(value);
					this.SendPropertyChanging();
					this._GrossWeight = value;
					this.SendPropertyChanged("GrossWeight");
					this.OnGrossWeightChanged();
				}
			}
		}
		
		[Column(Storage="_LoadedLength", DbType="Int")]
		public System.Nullable<int> LoadedLength
		{
			get
			{
				return this._LoadedLength;
			}
			set
			{
				if ((this._LoadedLength != value))
				{
					this.OnLoadedLengthChanging(value);
					this.SendPropertyChanging();
					this._LoadedLength = value;
					this.SendPropertyChanged("LoadedLength");
					this.OnLoadedLengthChanged();
				}
			}
		}
		
		[Column(Storage="_LoadedWidth", DbType="Int")]
		public System.Nullable<int> LoadedWidth
		{
			get
			{
				return this._LoadedWidth;
			}
			set
			{
				if ((this._LoadedWidth != value))
				{
					this.OnLoadedWidthChanging(value);
					this.SendPropertyChanging();
					this._LoadedWidth = value;
					this.SendPropertyChanged("LoadedWidth");
					this.OnLoadedWidthChanged();
				}
			}
		}
		
		[Column(Storage="_LoadedHeight", DbType="Int")]
		public System.Nullable<int> LoadedHeight
		{
			get
			{
				return this._LoadedHeight;
			}
			set
			{
				if ((this._LoadedHeight != value))
				{
					this.OnLoadedHeightChanging(value);
					this.SendPropertyChanging();
					this._LoadedHeight = value;
					this.SendPropertyChanged("LoadedHeight");
					this.OnLoadedHeightChanged();
				}
			}
		}
		
		[Association(Name="Load_Dispatch", Storage="_Dispatches", OtherKey="LoadID")]
		public EntitySet<Dispatch> Dispatches
		{
			get
			{
				return this._Dispatches;
			}
			set
			{
				this._Dispatches.Assign(value);
			}
		}
		
		[Association(Name="Load_JobCommodity", Storage="_JobCommodities", OtherKey="LoadID")]
		public EntitySet<JobCommodity> JobCommodities
		{
			get
			{
				return this._JobCommodities;
			}
			set
			{
				this._JobCommodities.Assign(value);
			}
		}
		
		[Association(Name="Job_Load", Storage="_Job", ThisKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Loads.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Loads.Add(this);
						this._JobID = value.ID;
					}
					else
					{
						this._JobID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[Association(Name="Season_Load", Storage="_Season", ThisKey="SeasonID", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.Loads.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.Loads.Add(this);
						this._SeasonID = value.ID;
					}
					else
					{
						this._SeasonID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		[Association(Name="TrailerCombination_Load", Storage="_TrailerCombination", ThisKey="TrailerCombinationID", IsForeignKey=true)]
		public TrailerCombination TrailerCombination
		{
			get
			{
				return this._TrailerCombination.Entity;
			}
			set
			{
				TrailerCombination previousValue = this._TrailerCombination.Entity;
				if (((previousValue != value) 
							|| (this._TrailerCombination.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrailerCombination.Entity = null;
						previousValue.Loads.Remove(this);
					}
					this._TrailerCombination.Entity = value;
					if ((value != null))
					{
						value.Loads.Add(this);
						this._TrailerCombinationID = value.ID;
					}
					else
					{
						this._TrailerCombinationID = default(Nullable<long>);
					}
					this.SendPropertyChanged("TrailerCombination");
				}
			}
		}
		
		[Association(Name="Unit_Load", Storage="_Unit", ThisKey="UnitID", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Loads.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Loads.Add(this);
						this._UnitID = value.ID;
					}
					else
					{
						this._UnitID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		[Association(Name="WheelType_Load", Storage="_WheelType", ThisKey="WheelTypeID", IsForeignKey=true)]
		public WheelType WheelType
		{
			get
			{
				return this._WheelType.Entity;
			}
			set
			{
				WheelType previousValue = this._WheelType.Entity;
				if (((previousValue != value) 
							|| (this._WheelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WheelType.Entity = null;
						previousValue.Loads.Remove(this);
					}
					this._WheelType.Entity = value;
					if ((value != null))
					{
						value.Loads.Add(this);
						this._WheelTypeID = value.ID;
					}
					else
					{
						this._WheelTypeID = default(Nullable<long>);
					}
					this.SendPropertyChanged("WheelType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dispatches(Dispatch entity)
		{
			this.SendPropertyChanging();
			entity.Load = this;
		}
		
		private void detach_Dispatches(Dispatch entity)
		{
			this.SendPropertyChanging();
			entity.Load = null;
		}
		
		private void attach_JobCommodities(JobCommodity entity)
		{
			this.SendPropertyChanging();
			entity.Load = this;
		}
		
		private void detach_JobCommodities(JobCommodity entity)
		{
			this.SendPropertyChanging();
			entity.Load = null;
		}
	}
}
#pragma warning restore 1591
